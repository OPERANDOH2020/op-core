/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2016
//
// Copyright in this software belongs to University of Southampton
// IT Innovation Centre of Gamma House, Enterprise Road,
// Chilworth Science Park, Southampton, SO16 7NS, UK.
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//      Created By :            Panos Melas
//      Created Date :          2017-03-21
//      Created for Project :   OPERANDO
//
/////////////////////////////////////////////////////////////////////////

/*
 * Policy DB
 * The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.operando.core.pdb.client.api;

import eu.operando.core.pdb.client.api.DELETEApi;
import eu.operando.core.pdb.client.ApiException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DELETEApi
 */
@Ignore
public class DELETEApiTest {

    private final DELETEApi api = new DELETEApi();

    
    /**
     * Remove the OSPRequest entry in the database.
     *
     * Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oSPOspIdDeleteTest() throws ApiException {
        String ospId = null;
        api.oSPOspIdDelete(ospId);

        // TODO: test validations
    }
    
    /**
     * Remove the AccessReason entry in the list.
     *
     * Remove an identified value. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oSPOspIdPrivacyPolicyAccessReasonsReasonIdDeleteTest() throws ApiException {
        String ospId = null;
        String reasonId = null;
        api.oSPOspIdPrivacyPolicyAccessReasonsReasonIdDelete(ospId, reasonId);

        // TODO: test validations
    }
    
    /**
     * Remove the PrivacyRegulation entry in the database.
     *
     * Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void regulationsRegIdDeleteTest() throws ApiException {
        String regId = null;
        api.regulationsRegIdDelete(regId);

        // TODO: test validations
    }
    
    /**
     * Remove the UPP entry in the database for the user.
     *
     * Called when a user leaves operando. Their privacy preferences and policies are deleted from the database. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userPrivacyPolicyUserIdDeleteTest() throws ApiException {
        String userId = null;
        api.userPrivacyPolicyUserIdDelete(userId);

        // TODO: test validations
    }
    
}
