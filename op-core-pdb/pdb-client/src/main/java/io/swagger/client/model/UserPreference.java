/**
 * Policy DB
 * The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * UserPreference
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-11-03T13:32:54.440Z")
public class UserPreference   {
  @SerializedName("informationtype")
  private String informationtype = null;

  @SerializedName("category")
  private String category = null;

  @SerializedName("preference")
  private String preference = null;

  @SerializedName("role")
  private String role = null;

  @SerializedName("action")
  private String action = null;

  @SerializedName("purpose")
  private String purpose = null;

  @SerializedName("recipient")
  private String recipient = null;

  public UserPreference informationtype(String informationtype) {
    this.informationtype = informationtype;
    return this;
  }

   /**
   * The type of private information; e.g. is it information that identifies the user (e.g. id number)? is it location information about the user? Is it about their activities? 
   * @return informationtype
  **/
  @ApiModelProperty(example = "null", value = "The type of private information; e.g. is it information that identifies the user (e.g. id number)? is it location information about the user? Is it about their activities? ")
  public String getInformationtype() {
    return informationtype;
  }

  public void setInformationtype(String informationtype) {
    this.informationtype = informationtype;
  }

  public UserPreference category(String category) {
    this.category = category;
    return this;
  }

   /**
   * The category of the service invading the privacy of the user. 
   * @return category
  **/
  @ApiModelProperty(example = "null", value = "The category of the service invading the privacy of the user. ")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public UserPreference preference(String preference) {
    this.preference = preference;
    return this;
  }

   /**
   * The user's privacy preference. High means they are sensitive to disclosing private information. Medium they have concerns; and low means they have few privacy concerns with this question. 
   * @return preference
  **/
  @ApiModelProperty(example = "null", value = "The user's privacy preference. High means they are sensitive to disclosing private information. Medium they have concerns; and low means they have few privacy concerns with this question. ")
  public String getPreference() {
    return preference;
  }

  public void setPreference(String preference) {
    this.preference = preference;
  }

  public UserPreference role(String role) {
    this.role = role;
    return this;
  }

   /**
   * The role of a person or service that the private information is being disclosed to or used by. This is an optional parameter in the case where users drill down to more detailed preferences. 
   * @return role
  **/
  @ApiModelProperty(example = "null", value = "The role of a person or service that the private information is being disclosed to or used by. This is an optional parameter in the case where users drill down to more detailed preferences. ")
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }

  public UserPreference action(String action) {
    this.action = action;
    return this;
  }

   /**
   * The action being carried out on the private date e.g. accessing, disclosing to a third party. This is an optional parameter in the case where users drill down to more detailed preferences.  
   * @return action
  **/
  @ApiModelProperty(example = "null", value = "The action being carried out on the private date e.g. accessing, disclosing to a third party. This is an optional parameter in the case where users drill down to more detailed preferences.  ")
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }

  public UserPreference purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

   /**
   * The purpose for which the service is using the private data. This is an optional parameter in the case where users drill down to more detailed preferences. 
   * @return purpose
  **/
  @ApiModelProperty(example = "null", value = "The purpose for which the service is using the private data. This is an optional parameter in the case where users drill down to more detailed preferences. ")
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }

  public UserPreference recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

   /**
   * The recipient of any disclosed privacy information. This is an optional parameter in the case where users drill down to more detailed preferences. 
   * @return recipient
  **/
  @ApiModelProperty(example = "null", value = "The recipient of any disclosed privacy information. This is an optional parameter in the case where users drill down to more detailed preferences. ")
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserPreference userPreference = (UserPreference) o;
    return Objects.equals(this.informationtype, userPreference.informationtype) &&
        Objects.equals(this.category, userPreference.category) &&
        Objects.equals(this.preference, userPreference.preference) &&
        Objects.equals(this.role, userPreference.role) &&
        Objects.equals(this.action, userPreference.action) &&
        Objects.equals(this.purpose, userPreference.purpose) &&
        Objects.equals(this.recipient, userPreference.recipient);
  }

  @Override
  public int hashCode() {
    return Objects.hash(informationtype, category, preference, role, action, purpose, recipient);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserPreference {\n");
    
    sb.append("    informationtype: ").append(toIndentedString(informationtype)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    preference: ").append(toIndentedString(preference)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

