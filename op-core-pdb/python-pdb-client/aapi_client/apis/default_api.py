# coding: utf-8

"""
    eu.operando.interfaces.aapi

    Operandos AS interfaces

    OpenAPI spec version: 0.0.1
    Contact: kpatsak@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def aapi_tickets_post(self, user_credential, **kwargs):
        """
         This operation makes a request for a ticket granting ticket (TGT) to the AAPI, which is the session key for the application SSO session. This operation should be called the very first time for an application to be authenticated  to OPERANDOs CAS server, through a login form.
        Login to AS and issue a session ticket (tgt)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aapi_tickets_post(user_credential, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserCredential user_credential: Users username, password (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.aapi_tickets_post_with_http_info(user_credential, **kwargs)
        else:
            (data) = self.aapi_tickets_post_with_http_info(user_credential, **kwargs)
            return data

    def aapi_tickets_post_with_http_info(self, user_credential, **kwargs):
        """
         This operation makes a request for a ticket granting ticket (TGT) to the AAPI, which is the session key for the application SSO session. This operation should be called the very first time for an application to be authenticated  to OPERANDOs CAS server, through a login form.
        Login to AS and issue a session ticket (tgt)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aapi_tickets_post_with_http_info(user_credential, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserCredential user_credential: Users username, password (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_credential']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aapi_tickets_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_credential' is set
        if ('user_credential' not in params) or (params['user_credential'] is None):
            raise ValueError("Missing the required parameter `user_credential` when calling `aapi_tickets_post`")


        collection_formats = {}

        resource_path = '/aapi/tickets'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_credential' in params:
            body_params = params['user_credential']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def aapi_tickets_st_validate_get(self, st, service_id, **kwargs):
        """
        
        Validate the service ticket (ST)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aapi_tickets_st_validate_get(st, service_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str st: service ticket (ST) (required)
        :param str service_id: service identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.aapi_tickets_st_validate_get_with_http_info(st, service_id, **kwargs)
        else:
            (data) = self.aapi_tickets_st_validate_get_with_http_info(st, service_id, **kwargs)
            return data

    def aapi_tickets_st_validate_get_with_http_info(self, st, service_id, **kwargs):
        """
        
        Validate the service ticket (ST)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aapi_tickets_st_validate_get_with_http_info(st, service_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str st: service ticket (ST) (required)
        :param str service_id: service identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['st', 'service_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aapi_tickets_st_validate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'st' is set
        if ('st' not in params) or (params['st'] is None):
            raise ValueError("Missing the required parameter `st` when calling `aapi_tickets_st_validate_get`")
        # verify the required parameter 'service_id' is set
        if ('service_id' not in params) or (params['service_id'] is None):
            raise ValueError("Missing the required parameter `service_id` when calling `aapi_tickets_st_validate_get`")


        collection_formats = {}

        resource_path = '/aapi/tickets/{st}/validate'.replace('{format}', 'json')
        path_params = {}
        if 'st' in params:
            path_params['st'] = params['st']

        query_params = {}
        if 'service_id' in params:
            query_params['serviceId'] = params['service_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def aapi_tickets_tgt_post(self, tgt, service_id, **kwargs):
        """
         This operation makes a request for a service ticket (ST) to the AAPI, which is the authorization ticket for a specific protected service of OPERANDOs system. This operation should be called each time the user tried to access a protected service
        Request a service ticket (ST) for the service with id serviceId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aapi_tickets_tgt_post(tgt, service_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tgt: Users session ticket (TGT) (required)
        :param str service_id: Services endpoint (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.aapi_tickets_tgt_post_with_http_info(tgt, service_id, **kwargs)
        else:
            (data) = self.aapi_tickets_tgt_post_with_http_info(tgt, service_id, **kwargs)
            return data

    def aapi_tickets_tgt_post_with_http_info(self, tgt, service_id, **kwargs):
        """
         This operation makes a request for a service ticket (ST) to the AAPI, which is the authorization ticket for a specific protected service of OPERANDOs system. This operation should be called each time the user tried to access a protected service
        Request a service ticket (ST) for the service with id serviceId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aapi_tickets_tgt_post_with_http_info(tgt, service_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tgt: Users session ticket (TGT) (required)
        :param str service_id: Services endpoint (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tgt', 'service_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aapi_tickets_tgt_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tgt' is set
        if ('tgt' not in params) or (params['tgt'] is None):
            raise ValueError("Missing the required parameter `tgt` when calling `aapi_tickets_tgt_post`")
        # verify the required parameter 'service_id' is set
        if ('service_id' not in params) or (params['service_id'] is None):
            raise ValueError("Missing the required parameter `service_id` when calling `aapi_tickets_tgt_post`")


        collection_formats = {}

        resource_path = '/aapi/tickets/{tgt}'.replace('{format}', 'json')
        path_params = {}
        if 'tgt' in params:
            path_params['tgt'] = params['tgt']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_id' in params:
            body_params = params['service_id']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def aapi_user_register_post(self, user, **kwargs):
        """
        This operation registers a user to OPERANDOs platform.
        This operation registers a user to OPERANDOs platform.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aapi_user_register_post(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user: User description (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.aapi_user_register_post_with_http_info(user, **kwargs)
        else:
            (data) = self.aapi_user_register_post_with_http_info(user, **kwargs)
            return data

    def aapi_user_register_post_with_http_info(self, user, **kwargs):
        """
        This operation registers a user to OPERANDOs platform.
        This operation registers a user to OPERANDOs platform.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aapi_user_register_post_with_http_info(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user: User description (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aapi_user_register_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `aapi_user_register_post`")


        collection_formats = {}

        resource_path = '/aapi/user/register'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_username_delete(self, username, **kwargs):
        """
        
        Delete ASs registed user with corresponding username
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_username_delete(username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: Users username (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_username_delete_with_http_info(username, **kwargs)
        else:
            (data) = self.user_username_delete_with_http_info(username, **kwargs)
            return data

    def user_username_delete_with_http_info(self, username, **kwargs):
        """
        
        Delete ASs registed user with corresponding username
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_username_delete_with_http_info(username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: Users username (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_username_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `user_username_delete`")


        collection_formats = {}

        resource_path = '/user/{username}'.replace('{format}', 'json')
        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_username_get(self, username, **kwargs):
        """
        This operation returns the OPERANDOs registed user with given username
        This operation returns the OPERANDOs registed user with given username
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_username_get(username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: Users username (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_username_get_with_http_info(username, **kwargs)
        else:
            (data) = self.user_username_get_with_http_info(username, **kwargs)
            return data

    def user_username_get_with_http_info(self, username, **kwargs):
        """
        This operation returns the OPERANDOs registed user with given username
        This operation returns the OPERANDOs registed user with given username
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_username_get_with_http_info(username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: Users username (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_username_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `user_username_get`")


        collection_formats = {}

        resource_path = '/user/{username}'.replace('{format}', 'json')
        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_username_put(self, username, user, **kwargs):
        """
        
        Updates the content of ASs registed user with corresponding username
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_username_put(username, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: Users username (required)
        :param User user: Users data (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_username_put_with_http_info(username, user, **kwargs)
        else:
            (data) = self.user_username_put_with_http_info(username, user, **kwargs)
            return data

    def user_username_put_with_http_info(self, username, user, **kwargs):
        """
        
        Updates the content of ASs registed user with corresponding username
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_username_put_with_http_info(username, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: Users username (required)
        :param User user: Users data (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_username_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `user_username_put`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_username_put`")


        collection_formats = {}

        resource_path = '/user/{username}'.replace('{format}', 'json')
        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
