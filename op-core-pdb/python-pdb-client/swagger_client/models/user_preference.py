# coding: utf-8

"""
    Policy DB

    The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 

    OpenAPI spec version: 1.0.0
    Contact: support@operando.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserPreference(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, informationtype=None, category=None, preference=None, role=None, action=None, purpose=None, recipient=None):
        """
        UserPreference - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'informationtype': 'str',
            'category': 'str',
            'preference': 'str',
            'role': 'str',
            'action': 'str',
            'purpose': 'str',
            'recipient': 'str'
        }

        self.attribute_map = {
            'informationtype': 'informationtype',
            'category': 'category',
            'preference': 'preference',
            'role': 'role',
            'action': 'action',
            'purpose': 'purpose',
            'recipient': 'recipient'
        }

        self._informationtype = informationtype
        self._category = category
        self._preference = preference
        self._role = role
        self._action = action
        self._purpose = purpose
        self._recipient = recipient

    @property
    def informationtype(self):
        """
        Gets the informationtype of this UserPreference.
        The type of private information; e.g. is it information that identifies the user (e.g. id number)? is it location information about the user? Is it about their activities? 

        :return: The informationtype of this UserPreference.
        :rtype: str
        """
        return self._informationtype

    @informationtype.setter
    def informationtype(self, informationtype):
        """
        Sets the informationtype of this UserPreference.
        The type of private information; e.g. is it information that identifies the user (e.g. id number)? is it location information about the user? Is it about their activities? 

        :param informationtype: The informationtype of this UserPreference.
        :type: str
        """

        self._informationtype = informationtype

    @property
    def category(self):
        """
        Gets the category of this UserPreference.
        The category of the service invading the privacy of the user. 

        :return: The category of this UserPreference.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this UserPreference.
        The category of the service invading the privacy of the user. 

        :param category: The category of this UserPreference.
        :type: str
        """

        self._category = category

    @property
    def preference(self):
        """
        Gets the preference of this UserPreference.
        The user's privacy preference. High means they are sensitive to disclosing private information. Medium they have concerns; and low means they have few privacy concerns with this question. 

        :return: The preference of this UserPreference.
        :rtype: str
        """
        return self._preference

    @preference.setter
    def preference(self, preference):
        """
        Sets the preference of this UserPreference.
        The user's privacy preference. High means they are sensitive to disclosing private information. Medium they have concerns; and low means they have few privacy concerns with this question. 

        :param preference: The preference of this UserPreference.
        :type: str
        """

        self._preference = preference

    @property
    def role(self):
        """
        Gets the role of this UserPreference.
        The role of a person or service that the private information is being disclosed to or used by. This is an optional parameter in the case where users drill down to more detailed preferences. 

        :return: The role of this UserPreference.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this UserPreference.
        The role of a person or service that the private information is being disclosed to or used by. This is an optional parameter in the case where users drill down to more detailed preferences. 

        :param role: The role of this UserPreference.
        :type: str
        """

        self._role = role

    @property
    def action(self):
        """
        Gets the action of this UserPreference.
        The action being carried out on the private date e.g. accessing, disclosing to a third party. This is an optional parameter in the case where users drill down to more detailed preferences.  

        :return: The action of this UserPreference.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this UserPreference.
        The action being carried out on the private date e.g. accessing, disclosing to a third party. This is an optional parameter in the case where users drill down to more detailed preferences.  

        :param action: The action of this UserPreference.
        :type: str
        """

        self._action = action

    @property
    def purpose(self):
        """
        Gets the purpose of this UserPreference.
        The purpose for which the service is using the private data. This is an optional parameter in the case where users drill down to more detailed preferences. 

        :return: The purpose of this UserPreference.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """
        Sets the purpose of this UserPreference.
        The purpose for which the service is using the private data. This is an optional parameter in the case where users drill down to more detailed preferences. 

        :param purpose: The purpose of this UserPreference.
        :type: str
        """

        self._purpose = purpose

    @property
    def recipient(self):
        """
        Gets the recipient of this UserPreference.
        The recipient of any disclosed privacy information. This is an optional parameter in the case where users drill down to more detailed preferences. 

        :return: The recipient of this UserPreference.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """
        Sets the recipient of this UserPreference.
        The recipient of any disclosed privacy information. This is an optional parameter in the case where users drill down to more detailed preferences. 

        :param recipient: The recipient of this UserPreference.
        :type: str
        """

        self._recipient = recipient

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
