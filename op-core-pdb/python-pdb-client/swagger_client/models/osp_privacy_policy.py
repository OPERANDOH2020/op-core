# coding: utf-8

"""
    Policy DB

    The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 

    OpenAPI spec version: 1.0.0
    Contact: support@operando.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OSPPrivacyPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, osp_policy_id=None, policy_text=None, policy_url=None, workflow=None, policies=None):
        """
        OSPPrivacyPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'osp_policy_id': 'str',
            'policy_text': 'str',
            'policy_url': 'str',
            'workflow': 'list[OSPDataRequest]',
            'policies': 'list[AccessPolicy]'
        }

        self.attribute_map = {
            'osp_policy_id': 'osp_policy_id',
            'policy_text': 'policy_text',
            'policy_url': 'policy_url',
            'workflow': 'workflow',
            'policies': 'policies'
        }

        self._osp_policy_id = osp_policy_id
        self._policy_text = policy_text
        self._policy_url = policy_url
        self._workflow = workflow
        self._policies = policies

    @property
    def osp_policy_id(self):
        """
        Gets the osp_policy_id of this OSPPrivacyPolicy.

        :return: The osp_policy_id of this OSPPrivacyPolicy.
        :rtype: str
        """
        return self._osp_policy_id

    @osp_policy_id.setter
    def osp_policy_id(self, osp_policy_id):
        """
        Sets the osp_policy_id of this OSPPrivacyPolicy.

        :param osp_policy_id: The osp_policy_id of this OSPPrivacyPolicy.
        :type: str
        """

        self._osp_policy_id = osp_policy_id

    @property
    def policy_text(self):
        """
        Gets the policy_text of this OSPPrivacyPolicy.
        The content of the OSP privacy policy, textually described and published. It is a the full text adverstised by the OSP. 

        :return: The policy_text of this OSPPrivacyPolicy.
        :rtype: str
        """
        return self._policy_text

    @policy_text.setter
    def policy_text(self, policy_text):
        """
        Sets the policy_text of this OSPPrivacyPolicy.
        The content of the OSP privacy policy, textually described and published. It is a the full text adverstised by the OSP. 

        :param policy_text: The policy_text of this OSPPrivacyPolicy.
        :type: str
        """

        self._policy_text = policy_text

    @property
    def policy_url(self):
        """
        Gets the policy_url of this OSPPrivacyPolicy.
        The url location of the privacy policy of the OSP 

        :return: The policy_url of this OSPPrivacyPolicy.
        :rtype: str
        """
        return self._policy_url

    @policy_url.setter
    def policy_url(self, policy_url):
        """
        Sets the policy_url of this OSPPrivacyPolicy.
        The url location of the privacy policy of the OSP 

        :param policy_url: The policy_url of this OSPPrivacyPolicy.
        :type: str
        """

        self._policy_url = policy_url

    @property
    def workflow(self):
        """
        Gets the workflow of this OSPPrivacyPolicy.
        The sequence of requests that this OSP makes (simple ordered array list in this version). The requests describes the operations that the OSP may carry out on the data. This can be used for compliance checking and computation of user policies. 

        :return: The workflow of this OSPPrivacyPolicy.
        :rtype: list[OSPDataRequest]
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """
        Sets the workflow of this OSPPrivacyPolicy.
        The sequence of requests that this OSP makes (simple ordered array list in this version). The requests describes the operations that the OSP may carry out on the data. This can be used for compliance checking and computation of user policies. 

        :param workflow: The workflow of this OSPPrivacyPolicy.
        :type: list[OSPDataRequest]
        """

        self._workflow = workflow

    @property
    def policies(self):
        """
        Gets the policies of this OSPPrivacyPolicy.
        The list of rights that the OSP intends to follow e.g. give X access to Y data for Z purpose. This information can then be used in calculation of the policy and in compliance checking. 

        :return: The policies of this OSPPrivacyPolicy.
        :rtype: list[AccessPolicy]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """
        Sets the policies of this OSPPrivacyPolicy.
        The list of rights that the OSP intends to follow e.g. give X access to Y data for Z purpose. This information can then be used in calculation of the policy and in compliance checking. 

        :param policies: The policies of this OSPPrivacyPolicy.
        :type: list[AccessPolicy]
        """

        self._policies = policies

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
