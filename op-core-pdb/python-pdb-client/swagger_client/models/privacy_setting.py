# coding: utf-8

"""
    Policy DB

    The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 

    OpenAPI spec version: 1.0.0
    Contact: support@operando.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PrivacySetting(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, description=None, name=None, setting_key=None, setting_value=None):
        """
        PrivacySetting - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'description': 'str',
            'name': 'str',
            'setting_key': 'str',
            'setting_value': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'name': 'name',
            'setting_key': 'setting_key',
            'setting_value': 'setting_value'
        }

        self._id = id
        self._description = description
        self._name = name
        self._setting_key = setting_key
        self._setting_value = setting_value

    @property
    def id(self):
        """
        Gets the id of this PrivacySetting.
        PrivacySetting Unique Identifier

        :return: The id of this PrivacySetting.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PrivacySetting.
        PrivacySetting Unique Identifier

        :param id: The id of this PrivacySetting.
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """
        Gets the description of this PrivacySetting.
        Description of the setting

        :return: The description of this PrivacySetting.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PrivacySetting.
        Description of the setting

        :param description: The description of this PrivacySetting.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this PrivacySetting.
        Short name of the setting(e.g. visibility)

        :return: The name of this PrivacySetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PrivacySetting.
        Short name of the setting(e.g. visibility)

        :param name: The name of this PrivacySetting.
        :type: str
        """

        self._name = name

    @property
    def setting_key(self):
        """
        Gets the setting_key of this PrivacySetting.
        Targeted setting key

        :return: The setting_key of this PrivacySetting.
        :rtype: str
        """
        return self._setting_key

    @setting_key.setter
    def setting_key(self, setting_key):
        """
        Sets the setting_key of this PrivacySetting.
        Targeted setting key

        :param setting_key: The setting_key of this PrivacySetting.
        :type: str
        """

        self._setting_key = setting_key

    @property
    def setting_value(self):
        """
        Gets the setting_value of this PrivacySetting.
        Targeted setting value

        :return: The setting_value of this PrivacySetting.
        :rtype: str
        """
        return self._setting_value

    @setting_value.setter
    def setting_value(self, setting_value):
        """
        Sets the setting_value of this PrivacySetting.
        Targeted setting value

        :param setting_value: The setting_value of this PrivacySetting.
        :type: str
        """

        self._setting_value = setting_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
