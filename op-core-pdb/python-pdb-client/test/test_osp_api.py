# coding: utf-8

"""
    Policy DB

    The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 

    OpenAPI spec version: 1.0.0
    Contact: support@operando.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import swagger_client
from swagger_client.rest import ApiException
from swagger_client.apis.osp_api import OSPApi


class TestOSPApi(unittest.TestCase):
    """ OSPApi unit test stubs """
    BASE_PATH = "http://10.136.24.87:8080"
    BASE_PATH = "http://integration.operando.esilab.org:8096/operando/core"
    _osp_id = "xxxx"
    _osp_policy = None

    def setUp(self):
        base_path = "".join([self.BASE_PATH, "/pdb"])
        api_client = swagger_client.ApiClient(host=base_path)
        self.api = swagger_client.apis.osp_api.OSPApi(api_client)

    def tearDown(self):
        pass

    #@unittest.skip("demo skipping")
    def test_osp_all(self):
        print("Test case for o_sp_get with filter")
        osp_all_filter = "{\"policy_text\":\"\"}"
        api_response = self.api.o_sp_get(osp_all_filter)
        osp_list_length = len(api_response)
        self.assertNotEqual(api_response, None)
        self.assertTrue(osp_list_length >= 1) 
        try:
           assert len(api_response) > 0
        except Exception as e:
           print("Test OSP failed to get any stored osp")
           raise e

        osp_policy = api_response[0]

        print("Test case for o_sp_post", osp_list_length)
        osp_policy.policy_text = "test test test"
        api_response = self.api.o_sp_post(osp_policy)
        print("POST response:", api_response)
        self.assertNotEqual(api_response, None)
        osp_id = api_response

        print("Test case for o_sp_osp_id_get")
        api_response = self.api.o_sp_osp_id_get(osp_id)
        self.assertEqual(api_response.osp_policy_id, osp_id)

        print("Test case for o_sp_osp_id_put")
        osp_policy.policy_text = "TEST TEST TEST"
        api_response = self.api.o_sp_osp_id_put(osp_id, osp_policy)
        # print("PUT response", api_response)
        api_response = self.api.o_sp_osp_id_get(osp_id)
        # print("PUT response", api_response)
        self.assertEqual(api_response.osp_policy_id, osp_id)
        self.assertEqual(api_response.policy_text, "TEST TEST TEST")

        print("Test case for o_sp_osp_id_delete")
        api_response = self.api.o_sp_osp_id_delete(osp_id)
        print("DELETE:", api_response)

        api_response = self.api.o_sp_get(osp_all_filter)
        self.assertEqual(osp_list_length, len(api_response))

    @unittest.skip("demo skipping")
    def test_o_sp_get(self):
        """
        Test case for o_sp_get

        Perform a search query across the collection of OSP behaviour.
        """
        print("Test case for o_sp_get with filter")
        osp_all_filter = "{\"policyText\":\"\"}"

        api_response = self.api.o_sp_get(osp_all_filter)

        self.assertNotEqual(api_response, None)
        self.__class__._osp_policy = api_response[0]
        self.__class__._osp_id = api_response[0].osp_policy_id
        for osp_item in api_response:
            print(osp_item.osp_policy_id, osp_item.policy_text)
        # print(self._osp_policy.osp_policy_id)
        pass
  
    @unittest.skip("demo skipping")
    def test_o_sp_osp_id_delete(self):
        """
        Test case for o_sp_osp_id_delete

        Remove the OSPRequest entry in the database.
        """
        osp_id = self.__class__._osp_id
        api_response = self.api.o_sp_osp_id_delete(ops_id)
        print("DELETE:", api_response)
        pass

    @unittest.skip("demo skipping")
    def test_o_sp_osp_id_get(self):
        """
        Test case for o_sp_osp_id_get

        Read a given OSP behaviour policy.
        """
        print("Test case for o_sp_osp_id_get")
        osp_id = self.__class__._osp_id
        #osp_id = '587f7eb56e157a10eece95d3'
        print("get: ", osp_id)
        api_response = self.api.o_sp_osp_id_get(osp_id)
        self.assertEqual(api_response.osp_policy_id, osp_id)
        pass

    @unittest.skip("demo skipping")
    def test_o_sp_osp_id_privacy_policy_access_reasons_get(self):
        """
        Test case for o_sp_osp_id_privacy_policy_access_reasons_get

        Get the list of access reason policy statements.
        """
        pass

    @unittest.skip("demo skipping")
    def test_o_sp_osp_id_privacy_policy_access_reasons_post(self):
        """
        Test case for o_sp_osp_id_privacy_policy_access_reasons_post

        Create a new access reason statement in the privacy policy.
        """
        pass

    @unittest.skip("demo skipping")
    def test_o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete(self):
        """
        Test case for o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete

        Remove the AccessReason entry in the list.
        """
        pass

    @unittest.skip("demo skipping")
    def test_o_sp_osp_id_privacy_policy_access_reasons_reason_id_put(self):
        """
        Test case for o_sp_osp_id_privacy_policy_access_reasons_reason_id_put

        Update an access reason statement in the privacy policy.
        """
        pass

    @unittest.skip("demo skipping")
    def test_o_sp_osp_id_privacy_policy_get(self):
        """
        Test case for o_sp_osp_id_privacy_policy_get

        Get the current set of privacy policy statements about the usage of data for stated reasons.
        """
        pass

    @unittest.skip("demo skipping")
    def test_o_sp_osp_id_privacy_policy_put(self):
        """
        Test case for o_sp_osp_id_privacy_policy_put

        Update OSP text policy entry in the database.
        """
        pass

    @unittest.skip("demo skipping")
    def test_o_sp_osp_id_put(self):
        """
        Test case for o_sp_osp_id_put

        Update OSPBehaviour entry in the database.
        """
        print("Test case for o_sp_osp_id_put")
        osp_policy = self.__class__._osp_policy
        osp_policy.policy_text = "test test test"
        # print("osp_policy:", osp_policy.osp_policy_id)
        api_response = self.api.o_sp_post(osp_policy)
        self.assertEqual(self.__class__._osp_id, api_response.osp_policy_id)
        print("osp policy", api_response.osp_policy_id)
        pass

    @unittest.skip("demo skipping")
    def test_o_sp_post(self):
        """
        Test case for o_sp_post

        Create a new OSP entry in the database.
        """
        print("Test case for o_sp_post")
        # print(self.__class__._osp_policy.osp_policy_id)
        osp_policy = self.__class__._osp_policy
        osp_policy.policy_text = "test test test"
        # print("osp_policy:", osp_policy.osp_policy_id)
        api_response = self.api.o_sp_post(osp_policy)
        # self.assertNotEqual(api_response, None)
        self.__class__._osp_id = api_response.osp_policy_id
        self.__class__._osp_policy = api_response
        print("posting osp policy", api_response.osp_policy_id)
        pass


if __name__ == '__main__':
    if len(sys.argv) > 1:
        TestOSPApi.BASE_PATH = sys.argv.pop()
    unittest.main()
