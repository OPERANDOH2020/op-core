# coding: utf-8

"""
    Policy DB

    The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 

    OpenAPI spec version: 1.0.0
    Contact: support@operando.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GETApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def o_sp_get(self, filter, **kwargs):
        """
        Perform a search query across the collection of OSP behaviour.
        The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_get(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: The query filter to be matched - ?filter={json description} (required)
        :return: list[OSPPrivacyPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_get_with_http_info(filter, **kwargs)
        else:
            (data) = self.o_sp_get_with_http_info(filter, **kwargs)
            return data

    def o_sp_get_with_http_info(self, filter, **kwargs):
        """
        Perform a search query across the collection of OSP behaviour.
        The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_get_with_http_info(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: The query filter to be matched - ?filter={json description} (required)
        :return: list[OSPPrivacyPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params) or (params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `o_sp_get`")


        collection_formats = {}

        resource_path = '/OSP/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[OSPPrivacyPolicy]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_get(self, osp_id, **kwargs):
        """
        Read a given OSP behaviour policy.
        Get a specific OSP document via the id. This will return the full OSP document in json format. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_get(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: OSPPrivacyPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_get_with_http_info(osp_id, **kwargs)
        else:
            (data) = self.o_sp_osp_id_get_with_http_info(osp_id, **kwargs)
            return data

    def o_sp_osp_id_get_with_http_info(self, osp_id, **kwargs):
        """
        Read a given OSP behaviour policy.
        Get a specific OSP document via the id. This will return the full OSP document in json format. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_get_with_http_info(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: OSPPrivacyPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_get`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OSPPrivacyPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_privacy_policy_access_reasons_get(self, osp_id, **kwargs):
        """
        Get the list of access reason policy statements.
        List of policy statements.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_get(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: list[OSPReasonPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_access_reasons_get_with_http_info(osp_id, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_access_reasons_get_with_http_info(osp_id, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_access_reasons_get_with_http_info(self, osp_id, **kwargs):
        """
        Get the list of access reason policy statements.
        List of policy statements.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_get_with_http_info(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: list[OSPReasonPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_access_reasons_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_get`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/access-reasons'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[OSPReasonPolicy]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_privacy_policy_get(self, osp_id, **kwargs):
        """
        Get the current set of privacy policy statements about the usage of data for stated reasons.
        This is a machine readable version of a G2C privacy policy statement entered using the OSP Admin dashboard; and retrieved by both the OSP & PSP analyst dashboard for display purposes and also by the OSE component for checking regulation compliance.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_get(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: OSPReasonPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_get_with_http_info(osp_id, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_get_with_http_info(osp_id, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_get_with_http_info(self, osp_id, **kwargs):
        """
        Get the current set of privacy policy statements about the usage of data for stated reasons.
        This is a machine readable version of a G2C privacy policy statement entered using the OSP Admin dashboard; and retrieved by both the OSP & PSP analyst dashboard for display purposes and also by the OSE component for checking regulation compliance.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_get_with_http_info(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: OSPReasonPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_get`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OSPReasonPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def regulations_get(self, filter, **kwargs):
        """
        Perform a search query across the collection of regulation.
        The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.regulations_get(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: The query filter to be matched - ?filter={json description} (required)
        :return: list[PrivacyRegulation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.regulations_get_with_http_info(filter, **kwargs)
        else:
            (data) = self.regulations_get_with_http_info(filter, **kwargs)
            return data

    def regulations_get_with_http_info(self, filter, **kwargs):
        """
        Perform a search query across the collection of regulation.
        The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.regulations_get_with_http_info(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: The query filter to be matched - ?filter={json description} (required)
        :return: list[PrivacyRegulation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method regulations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params) or (params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `regulations_get`")


        collection_formats = {}

        resource_path = '/regulations/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PrivacyRegulation]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def regulations_reg_id_get(self, reg_id, **kwargs):
        """
        Read a given legislation with its ID.
        Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.regulations_reg_id_get(reg_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str reg_id: The identifier number of a regulation (required)
        :return: PrivacyRegulation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.regulations_reg_id_get_with_http_info(reg_id, **kwargs)
        else:
            (data) = self.regulations_reg_id_get_with_http_info(reg_id, **kwargs)
            return data

    def regulations_reg_id_get_with_http_info(self, reg_id, **kwargs):
        """
        Read a given legislation with its ID.
        Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.regulations_reg_id_get_with_http_info(reg_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str reg_id: The identifier number of a regulation (required)
        :return: PrivacyRegulation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reg_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method regulations_reg_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reg_id' is set
        if ('reg_id' not in params) or (params['reg_id'] is None):
            raise ValueError("Missing the required parameter `reg_id` when calling `regulations_reg_id_get`")


        collection_formats = {}

        resource_path = '/regulations/{reg-id}/'.replace('{format}', 'json')
        path_params = {}
        if 'reg_id' in params:
            path_params['reg-id'] = params['reg_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrivacyRegulation',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_privacy_policy_get(self, filter, **kwargs):
        """
        Perform a search query across the collection of UPPs.
        The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_privacy_policy_get(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: The query filter to be matched - ?filter={json description} (required)
        :return: list[UserPrivacyPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_privacy_policy_get_with_http_info(filter, **kwargs)
        else:
            (data) = self.user_privacy_policy_get_with_http_info(filter, **kwargs)
            return data

    def user_privacy_policy_get_with_http_info(self, filter, **kwargs):
        """
        Perform a search query across the collection of UPPs.
        The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_privacy_policy_get_with_http_info(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: The query filter to be matched - ?filter={json description} (required)
        :return: list[UserPrivacyPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_privacy_policy_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params) or (params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `user_privacy_policy_get`")


        collection_formats = {}

        resource_path = '/user_privacy_policy/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[UserPrivacyPolicy]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_privacy_policy_user_id_get(self, user_id, **kwargs):
        """
        Read the user privacy policy for the given user id.
        Get a specific UPP document via the user's id. This will return the full user privacy policy document in json format. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_privacy_policy_user_id_get(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user identifier number (required)
        :return: UserPrivacyPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_privacy_policy_user_id_get_with_http_info(user_id, **kwargs)
        else:
            (data) = self.user_privacy_policy_user_id_get_with_http_info(user_id, **kwargs)
            return data

    def user_privacy_policy_user_id_get_with_http_info(self, user_id, **kwargs):
        """
        Read the user privacy policy for the given user id.
        Get a specific UPP document via the user's id. This will return the full user privacy policy document in json format. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_privacy_policy_user_id_get_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user identifier number (required)
        :return: UserPrivacyPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_privacy_policy_user_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_privacy_policy_user_id_get`")


        collection_formats = {}

        resource_path = '/user_privacy_policy/{user-id}/'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserPrivacyPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
