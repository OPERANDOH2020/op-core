# coding: utf-8

"""
    Policy DB

    The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 

    OpenAPI spec version: 1.0.0
    Contact: support@operando.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class POSTApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def o_sp_osp_id_privacy_policy_access_reasons_post(self, osp_id, osp_policy, **kwargs):
        """
        Create a new access reason statement in the privacy policy.
        Called by the UI when OSP updating the policy statements 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_post(osp_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param AccessReason osp_policy: The first instance of this new statement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_access_reasons_post_with_http_info(osp_id, osp_policy, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_access_reasons_post_with_http_info(osp_id, osp_policy, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_access_reasons_post_with_http_info(self, osp_id, osp_policy, **kwargs):
        """
        Create a new access reason statement in the privacy policy.
        Called by the UI when OSP updating the policy statements 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_post_with_http_info(osp_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param AccessReason osp_policy: The first instance of this new statement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id', 'osp_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_access_reasons_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_post`")
        # verify the required parameter 'osp_policy' is set
        if ('osp_policy' not in params) or (params['osp_policy'] is None):
            raise ValueError("Missing the required parameter `osp_policy` when calling `o_sp_osp_id_privacy_policy_access_reasons_post`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/access-reasons'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'osp_policy' in params:
            body_params = params['osp_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_privacy_policy_access_reasons_reason_id_put(self, osp_id, reason_id, osp_policy, **kwargs):
        """
        Update an access reason statement in the privacy policy.
        Called by the UI when OSP updating the policy statements 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_reason_id_put(osp_id, reason_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param str reason_id: The identifier of a statement in a policy, is only unique to the policy. (required)
        :param AccessReason osp_policy: The updated instance of this OSP policy statement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_access_reasons_reason_id_put_with_http_info(osp_id, reason_id, osp_policy, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_access_reasons_reason_id_put_with_http_info(osp_id, reason_id, osp_policy, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_access_reasons_reason_id_put_with_http_info(self, osp_id, reason_id, osp_policy, **kwargs):
        """
        Update an access reason statement in the privacy policy.
        Called by the UI when OSP updating the policy statements 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_reason_id_put_with_http_info(osp_id, reason_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param str reason_id: The identifier of a statement in a policy, is only unique to the policy. (required)
        :param AccessReason osp_policy: The updated instance of this OSP policy statement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id', 'reason_id', 'osp_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_access_reasons_reason_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_reason_id_put`")
        # verify the required parameter 'reason_id' is set
        if ('reason_id' not in params) or (params['reason_id'] is None):
            raise ValueError("Missing the required parameter `reason_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_reason_id_put`")
        # verify the required parameter 'osp_policy' is set
        if ('osp_policy' not in params) or (params['osp_policy'] is None):
            raise ValueError("Missing the required parameter `osp_policy` when calling `o_sp_osp_id_privacy_policy_access_reasons_reason_id_put`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/access-reasons/{reason-id}'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']
        if 'reason_id' in params:
            path_params['reason-id'] = params['reason_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'osp_policy' in params:
            body_params = params['osp_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_post(self, osp_policy, **kwargs):
        """
        Create a new OSP entry in the database.
        Called by the policy computation component when a new regulation is added to OPERANDO. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_post(osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OSPPrivacyPolicyInput osp_policy: The first instance of this OSP document (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_post_with_http_info(osp_policy, **kwargs)
        else:
            (data) = self.o_sp_post_with_http_info(osp_policy, **kwargs)
            return data

    def o_sp_post_with_http_info(self, osp_policy, **kwargs):
        """
        Create a new OSP entry in the database.
        Called by the policy computation component when a new regulation is added to OPERANDO. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_post_with_http_info(osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OSPPrivacyPolicyInput osp_policy: The first instance of this OSP document (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_policy' is set
        if ('osp_policy' not in params) or (params['osp_policy'] is None):
            raise ValueError("Missing the required parameter `osp_policy` when calling `o_sp_post`")


        collection_formats = {}

        resource_path = '/OSP/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'osp_policy' in params:
            body_params = params['osp_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def regulations_post(self, regulation, **kwargs):
        """
        Create a new legislation entry in the database.
        Called by the policy computation component when a new regulation is added to OPERANDO. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.regulations_post(regulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PrivacyRegulationInput regulation: The first instance of this regulation document (required)
        :return: PrivacyRegulation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.regulations_post_with_http_info(regulation, **kwargs)
        else:
            (data) = self.regulations_post_with_http_info(regulation, **kwargs)
            return data

    def regulations_post_with_http_info(self, regulation, **kwargs):
        """
        Create a new legislation entry in the database.
        Called by the policy computation component when a new regulation is added to OPERANDO. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.regulations_post_with_http_info(regulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PrivacyRegulationInput regulation: The first instance of this regulation document (required)
        :return: PrivacyRegulation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['regulation']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method regulations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'regulation' is set
        if ('regulation' not in params) or (params['regulation'] is None):
            raise ValueError("Missing the required parameter `regulation` when calling `regulations_post`")


        collection_formats = {}

        resource_path = '/regulations/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'regulation' in params:
            body_params = params['regulation']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrivacyRegulation',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_privacy_policy_post(self, upp, **kwargs):
        """
        Create a new UPP entry in the database for the user.
        Called when a new user is registered with operando. Their new privacy preferences are passed in the UPP document and stored in the policy DB. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_privacy_policy_post(upp, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserPrivacyPolicy upp: The first instance of this user's UPP (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_privacy_policy_post_with_http_info(upp, **kwargs)
        else:
            (data) = self.user_privacy_policy_post_with_http_info(upp, **kwargs)
            return data

    def user_privacy_policy_post_with_http_info(self, upp, **kwargs):
        """
        Create a new UPP entry in the database for the user.
        Called when a new user is registered with operando. Their new privacy preferences are passed in the UPP document and stored in the policy DB. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_privacy_policy_post_with_http_info(upp, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserPrivacyPolicy upp: The first instance of this user's UPP (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upp']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_privacy_policy_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upp' is set
        if ('upp' not in params) or (params['upp'] is None):
            raise ValueError("Missing the required parameter `upp` when calling `user_privacy_policy_post`")


        collection_formats = {}

        resource_path = '/user_privacy_policy/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upp' in params:
            body_params = params['upp']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
