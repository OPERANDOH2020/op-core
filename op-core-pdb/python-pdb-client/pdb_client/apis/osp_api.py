# coding: utf-8

"""
    Policy DB

    The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 

    OpenAPI spec version: 1.0.0
    Contact: support@operando.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class OSPApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def o_sp_get(self, filter, **kwargs):
        """
        Perform a search query across the collection of OSP behaviour.
        The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_get(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: The query filter to be matched - ?filter={json description} (required)
        :return: list[OSPPrivacyPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_get_with_http_info(filter, **kwargs)
        else:
            (data) = self.o_sp_get_with_http_info(filter, **kwargs)
            return data

    def o_sp_get_with_http_info(self, filter, **kwargs):
        """
        Perform a search query across the collection of OSP behaviour.
        The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_get_with_http_info(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: The query filter to be matched - ?filter={json description} (required)
        :return: list[OSPPrivacyPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params) or (params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `o_sp_get`")


        collection_formats = {}

        resource_path = '/OSP/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[OSPPrivacyPolicy]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_delete(self, osp_id, **kwargs):
        """
        Remove the OSPRequest entry in the database.
        Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_delete(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_delete_with_http_info(osp_id, **kwargs)
        else:
            (data) = self.o_sp_osp_id_delete_with_http_info(osp_id, **kwargs)
            return data

    def o_sp_osp_id_delete_with_http_info(self, osp_id, **kwargs):
        """
        Remove the OSPRequest entry in the database.
        Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_delete_with_http_info(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_delete`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_get(self, osp_id, **kwargs):
        """
        Read a given OSP behaviour policy.
        Get a specific OSP document via the id. This will return the full OSP document in json format. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_get(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: OSPPrivacyPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_get_with_http_info(osp_id, **kwargs)
        else:
            (data) = self.o_sp_osp_id_get_with_http_info(osp_id, **kwargs)
            return data

    def o_sp_osp_id_get_with_http_info(self, osp_id, **kwargs):
        """
        Read a given OSP behaviour policy.
        Get a specific OSP document via the id. This will return the full OSP document in json format. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_get_with_http_info(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: OSPPrivacyPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_get`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OSPPrivacyPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_privacy_policy_access_reasons_get(self, osp_id, **kwargs):
        """
        Get the list of access reason policy statements.
        List of policy statements.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_get(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: list[OSPReasonPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_access_reasons_get_with_http_info(osp_id, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_access_reasons_get_with_http_info(osp_id, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_access_reasons_get_with_http_info(self, osp_id, **kwargs):
        """
        Get the list of access reason policy statements.
        List of policy statements.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_get_with_http_info(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: list[OSPReasonPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_access_reasons_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_get`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/access-reasons'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[OSPReasonPolicy]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_privacy_policy_access_reasons_post(self, osp_id, osp_policy, **kwargs):
        """
        Create a new access reason statement in the privacy policy.
        Called by the UI when OSP updating the policy statements 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_post(osp_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param AccessReason osp_policy: The first instance of this new statement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_access_reasons_post_with_http_info(osp_id, osp_policy, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_access_reasons_post_with_http_info(osp_id, osp_policy, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_access_reasons_post_with_http_info(self, osp_id, osp_policy, **kwargs):
        """
        Create a new access reason statement in the privacy policy.
        Called by the UI when OSP updating the policy statements 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_post_with_http_info(osp_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param AccessReason osp_policy: The first instance of this new statement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id', 'osp_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_access_reasons_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_post`")
        # verify the required parameter 'osp_policy' is set
        if ('osp_policy' not in params) or (params['osp_policy'] is None):
            raise ValueError("Missing the required parameter `osp_policy` when calling `o_sp_osp_id_privacy_policy_access_reasons_post`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/access-reasons'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'osp_policy' in params:
            body_params = params['osp_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete(self, osp_id, reason_id, **kwargs):
        """
        Remove the AccessReason entry in the list.
        Remove an identified value. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete(osp_id, reason_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param str reason_id: The identifier of a statement in a policy, is only unique to the policy. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete_with_http_info(osp_id, reason_id, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete_with_http_info(osp_id, reason_id, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete_with_http_info(self, osp_id, reason_id, **kwargs):
        """
        Remove the AccessReason entry in the list.
        Remove an identified value. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete_with_http_info(osp_id, reason_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param str reason_id: The identifier of a statement in a policy, is only unique to the policy. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id', 'reason_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete`")
        # verify the required parameter 'reason_id' is set
        if ('reason_id' not in params) or (params['reason_id'] is None):
            raise ValueError("Missing the required parameter `reason_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_reason_id_delete`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/access-reasons/{reason-id}'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']
        if 'reason_id' in params:
            path_params['reason-id'] = params['reason_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_privacy_policy_access_reasons_reason_id_put(self, osp_id, reason_id, osp_policy, **kwargs):
        """
        Update an access reason statement in the privacy policy.
        Called by the UI when OSP updating the policy statements 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_reason_id_put(osp_id, reason_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param str reason_id: The identifier of a statement in a policy, is only unique to the policy. (required)
        :param AccessReason osp_policy: The updated instance of this OSP policy statement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_access_reasons_reason_id_put_with_http_info(osp_id, reason_id, osp_policy, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_access_reasons_reason_id_put_with_http_info(osp_id, reason_id, osp_policy, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_access_reasons_reason_id_put_with_http_info(self, osp_id, reason_id, osp_policy, **kwargs):
        """
        Update an access reason statement in the privacy policy.
        Called by the UI when OSP updating the policy statements 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_access_reasons_reason_id_put_with_http_info(osp_id, reason_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param str reason_id: The identifier of a statement in a policy, is only unique to the policy. (required)
        :param AccessReason osp_policy: The updated instance of this OSP policy statement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id', 'reason_id', 'osp_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_access_reasons_reason_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_reason_id_put`")
        # verify the required parameter 'reason_id' is set
        if ('reason_id' not in params) or (params['reason_id'] is None):
            raise ValueError("Missing the required parameter `reason_id` when calling `o_sp_osp_id_privacy_policy_access_reasons_reason_id_put`")
        # verify the required parameter 'osp_policy' is set
        if ('osp_policy' not in params) or (params['osp_policy'] is None):
            raise ValueError("Missing the required parameter `osp_policy` when calling `o_sp_osp_id_privacy_policy_access_reasons_reason_id_put`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/access-reasons/{reason-id}'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']
        if 'reason_id' in params:
            path_params['reason-id'] = params['reason_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'osp_policy' in params:
            body_params = params['osp_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_privacy_policy_get(self, osp_id, **kwargs):
        """
        Get the current set of privacy policy statements about the usage of data for stated reasons.
        This is a machine readable version of a G2C privacy policy statement entered using the OSP Admin dashboard; and retrieved by both the OSP & PSP analyst dashboard for display purposes and also by the OSE component for checking regulation compliance.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_get(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: OSPReasonPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_get_with_http_info(osp_id, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_get_with_http_info(osp_id, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_get_with_http_info(self, osp_id, **kwargs):
        """
        Get the current set of privacy policy statements about the usage of data for stated reasons.
        This is a machine readable version of a G2C privacy policy statement entered using the OSP Admin dashboard; and retrieved by both the OSP & PSP analyst dashboard for display purposes and also by the OSE component for checking regulation compliance.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_get_with_http_info(osp_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :return: OSPReasonPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_get`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OSPReasonPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_privacy_policy_put(self, osp_id, osp_policy, **kwargs):
        """
        Update OSP text policy entry in the database.
        Called when by the watchdog detects a change in the textual policy and wants to update the current policy. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_put(osp_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param OSPReasonPolicyInput osp_policy: The changed instance of this OSPRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_privacy_policy_put_with_http_info(osp_id, osp_policy, **kwargs)
        else:
            (data) = self.o_sp_osp_id_privacy_policy_put_with_http_info(osp_id, osp_policy, **kwargs)
            return data

    def o_sp_osp_id_privacy_policy_put_with_http_info(self, osp_id, osp_policy, **kwargs):
        """
        Update OSP text policy entry in the database.
        Called when by the watchdog detects a change in the textual policy and wants to update the current policy. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_privacy_policy_put_with_http_info(osp_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param OSPReasonPolicyInput osp_policy: The changed instance of this OSPRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id', 'osp_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_privacy_policy_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_privacy_policy_put`")
        # verify the required parameter 'osp_policy' is set
        if ('osp_policy' not in params) or (params['osp_policy'] is None):
            raise ValueError("Missing the required parameter `osp_policy` when calling `o_sp_osp_id_privacy_policy_put`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/privacy-policy/'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'osp_policy' in params:
            body_params = params['osp_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_osp_id_put(self, osp_id, osp_policy, **kwargs):
        """
        Update OSPBehaviour entry in the database.
        Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_put(osp_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param OSPPrivacyPolicyInput osp_policy: The changed instance of this OSPRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_osp_id_put_with_http_info(osp_id, osp_policy, **kwargs)
        else:
            (data) = self.o_sp_osp_id_put_with_http_info(osp_id, osp_policy, **kwargs)
            return data

    def o_sp_osp_id_put_with_http_info(self, osp_id, osp_policy, **kwargs):
        """
        Update OSPBehaviour entry in the database.
        Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_osp_id_put_with_http_info(osp_id, osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str osp_id: The identifier number of an OSP (required)
        :param OSPPrivacyPolicyInput osp_policy: The changed instance of this OSPRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_id', 'osp_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_osp_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_id' is set
        if ('osp_id' not in params) or (params['osp_id'] is None):
            raise ValueError("Missing the required parameter `osp_id` when calling `o_sp_osp_id_put`")
        # verify the required parameter 'osp_policy' is set
        if ('osp_policy' not in params) or (params['osp_policy'] is None):
            raise ValueError("Missing the required parameter `osp_policy` when calling `o_sp_osp_id_put`")


        collection_formats = {}

        resource_path = '/OSP/{osp-id}/'.replace('{format}', 'json')
        path_params = {}
        if 'osp_id' in params:
            path_params['osp-id'] = params['osp_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'osp_policy' in params:
            body_params = params['osp_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def o_sp_post(self, osp_policy, **kwargs):
        """
        Create a new OSP entry in the database.
        Called by the policy computation component when a new regulation is added to OPERANDO. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_post(osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OSPPrivacyPolicyInput osp_policy: The first instance of this OSP document (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.o_sp_post_with_http_info(osp_policy, **kwargs)
        else:
            (data) = self.o_sp_post_with_http_info(osp_policy, **kwargs)
            return data

    def o_sp_post_with_http_info(self, osp_policy, **kwargs):
        """
        Create a new OSP entry in the database.
        Called by the policy computation component when a new regulation is added to OPERANDO. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.o_sp_post_with_http_info(osp_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OSPPrivacyPolicyInput osp_policy: The first instance of this OSP document (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osp_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_sp_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osp_policy' is set
        if ('osp_policy' not in params) or (params['osp_policy'] is None):
            raise ValueError("Missing the required parameter `osp_policy` when calling `o_sp_post`")


        collection_formats = {}

        resource_path = '/OSP/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'osp_policy' in params:
            body_params = params['osp_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
