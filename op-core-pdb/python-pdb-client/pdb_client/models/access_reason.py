# coding: utf-8

"""
    Policy DB

    The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 

    OpenAPI spec version: 1.0.0
    Contact: support@operando.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccessReason(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, reasonid=None, datauser=None, datasubjecttype=None, datatype=None, reason=None):
        """
        AccessReason - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.pdb_types = {
            'reasonid': 'str',
            'datauser': 'str',
            'datasubjecttype': 'str',
            'datatype': 'str',
            'reason': 'str'
        }

        self.attribute_map = {
            'reasonid': 'reasonid',
            'datauser': 'datauser',
            'datasubjecttype': 'datasubjecttype',
            'datatype': 'datatype',
            'reason': 'reason'
        }

        self._reasonid = reasonid
        self._datauser = datauser
        self._datasubjecttype = datasubjecttype
        self._datatype = datatype
        self._reason = reason

    @property
    def reasonid(self):
        """
        Gets the reasonid of this AccessReason.
        An identifier within this privacy policy e.g osp_reason1. This is not globally unique and is defined by the OSP. However, OSP must ensure that  identifiers are unique within the policy list. 

        :return: The reasonid of this AccessReason.
        :rtype: str
        """
        return self._reasonid

    @reasonid.setter
    def reasonid(self, reasonid):
        """
        Sets the reasonid of this AccessReason.
        An identifier within this privacy policy e.g osp_reason1. This is not globally unique and is defined by the OSP. However, OSP must ensure that  identifiers are unique within the policy list. 

        :param reasonid: The reasonid of this AccessReason.
        :type: str
        """

        self._reasonid = reasonid

    @property
    def datauser(self):
        """
        Gets the datauser of this AccessReason.
        Who is using the data. 

        :return: The datauser of this AccessReason.
        :rtype: str
        """
        return self._datauser

    @datauser.setter
    def datauser(self, datauser):
        """
        Sets the datauser of this AccessReason.
        Who is using the data. 

        :param datauser: The datauser of this AccessReason.
        :type: str
        """

        self._datauser = datauser

    @property
    def datasubjecttype(self):
        """
        Gets the datasubjecttype of this AccessReason.
        What is the type or group of the user this private data concerns e.g. patient, helper etc. 

        :return: The datasubjecttype of this AccessReason.
        :rtype: str
        """
        return self._datasubjecttype

    @datasubjecttype.setter
    def datasubjecttype(self, datasubjecttype):
        """
        Sets the datasubjecttype of this AccessReason.
        What is the type or group of the user this private data concerns e.g. patient, helper etc. 

        :param datasubjecttype: The datasubjecttype of this AccessReason.
        :type: str
        """

        self._datasubjecttype = datasubjecttype

    @property
    def datatype(self):
        """
        Gets the datatype of this AccessReason.
        What is the type of data this refers to e.g. e-mail address, medical record etc. 

        :return: The datatype of this AccessReason.
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """
        Sets the datatype of this AccessReason.
        What is the type of data this refers to e.g. e-mail address, medical record etc. 

        :param datatype: The datatype of this AccessReason.
        :type: str
        """

        self._datatype = datatype

    @property
    def reason(self):
        """
        Gets the reason of this AccessReason.
        Usage of this information if for what purpose e.g. marketing, healthcare delivery. 

        :return: The reason of this AccessReason.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this AccessReason.
        Usage of this information if for what purpose e.g. marketing, healthcare delivery. 

        :param reason: The reason of this AccessReason.
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.pdb_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
