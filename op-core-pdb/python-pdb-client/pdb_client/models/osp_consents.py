# coding: utf-8

"""
    Policy DB

    The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 

    OpenAPI spec version: 1.0.0
    Contact: support@operando.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OSPConsents(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, osp_id=None, access_policies=None):
        """
        OSPConsents - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.pdb_types = {
            'osp_id': 'str',
            'access_policies': 'list[AccessPolicy]'
        }

        self.attribute_map = {
            'osp_id': 'osp_id',
            'access_policies': 'access_policies'
        }

        self._osp_id = osp_id
        self._access_policies = access_policies

    @property
    def osp_id(self):
        """
        Gets the osp_id of this OSPConsents.
        The unique ID of the OSP user is subscribed to and these consent policies concern.  

        :return: The osp_id of this OSPConsents.
        :rtype: str
        """
        return self._osp_id

    @osp_id.setter
    def osp_id(self, osp_id):
        """
        Sets the osp_id of this OSPConsents.
        The unique ID of the OSP user is subscribed to and these consent policies concern.  

        :param osp_id: The osp_id of this OSPConsents.
        :type: str
        """

        self._osp_id = osp_id

    @property
    def access_policies(self):
        """
        Gets the access_policies of this OSPConsents.
        OSP access policies

        :return: The access_policies of this OSPConsents.
        :rtype: list[AccessPolicy]
        """
        return self._access_policies

    @access_policies.setter
    def access_policies(self, access_policies):
        """
        Sets the access_policies of this OSPConsents.
        OSP access policies

        :param access_policies: The access_policies of this OSPConsents.
        :type: list[AccessPolicy]
        """

        self._access_policies = access_policies

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.pdb_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
