/*
 * Policy DB
 * The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.operando.core.pdb.client1.api;

import eu.operando.core.pdb.client1.ApiCallback;
import eu.operando.core.pdb.client1.ApiClient;
import eu.operando.core.pdb.client1.ApiException;
import eu.operando.core.pdb.client1.ApiResponse;
import eu.operando.core.pdb.client1.Configuration;
import eu.operando.core.pdb.client1.Pair;
import eu.operando.core.pdb.client1.ProgressRequestBody;
import eu.operando.core.pdb.client1.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.operando.core.pdb.client1.model.AccessReason;
import eu.operando.core.pdb.client1.model.OSPPrivacyPolicy;
import eu.operando.core.pdb.client1.model.OSPPrivacyPolicyInput;
import eu.operando.core.pdb.client1.model.OSPReasonPolicy;
import eu.operando.core.pdb.client1.model.OSPReasonPolicyInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OSPApi {
    private ApiClient apiClient;

    public OSPApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OSPApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for oSPGet */
    private com.squareup.okhttp.Call oSPGetCall(String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/OSP/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPGetValidateBeforeCall(String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling oSPGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPGetCall(filter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Perform a search query across the collection of OSP behaviour.
     * The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
     * @param filter The query filter to be matched - ?filter&#x3D;{json description} (required)
     * @return List&lt;OSPPrivacyPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OSPPrivacyPolicy> oSPGet(String filter) throws ApiException {
        ApiResponse<List<OSPPrivacyPolicy>> resp = oSPGetWithHttpInfo(filter);
        return resp.getData();
    }

    /**
     * Perform a search query across the collection of OSP behaviour.
     * The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
     * @param filter The query filter to be matched - ?filter&#x3D;{json description} (required)
     * @return ApiResponse&lt;List&lt;OSPPrivacyPolicy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OSPPrivacyPolicy>> oSPGetWithHttpInfo(String filter) throws ApiException {
        com.squareup.okhttp.Call call = oSPGetValidateBeforeCall(filter, null, null);
        Type localVarReturnType = new TypeToken<List<OSPPrivacyPolicy>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform a search query across the collection of OSP behaviour. (asynchronously)
     * The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
     * @param filter The query filter to be matched - ?filter&#x3D;{json description} (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPGetAsync(String filter, final ApiCallback<List<OSPPrivacyPolicy>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPGetValidateBeforeCall(filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OSPPrivacyPolicy>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for oSPOspIdDelete */
    private com.squareup.okhttp.Call oSPOspIdDeleteCall(String ospId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/OSP/{osp-id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "osp-id" + "\\}", apiClient.escapeString(ospId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPOspIdDeleteValidateBeforeCall(String ospId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospId' is set
        if (ospId == null) {
            throw new ApiException("Missing the required parameter 'ospId' when calling oSPOspIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPOspIdDeleteCall(ospId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove the OSPRequest entry in the database.
     * Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
     * @param ospId The identifier number of an OSP (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void oSPOspIdDelete(String ospId) throws ApiException {
        oSPOspIdDeleteWithHttpInfo(ospId);
    }

    /**
     * Remove the OSPRequest entry in the database.
     * Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
     * @param ospId The identifier number of an OSP (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> oSPOspIdDeleteWithHttpInfo(String ospId) throws ApiException {
        com.squareup.okhttp.Call call = oSPOspIdDeleteValidateBeforeCall(ospId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove the OSPRequest entry in the database. (asynchronously)
     * Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
     * @param ospId The identifier number of an OSP (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPOspIdDeleteAsync(String ospId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPOspIdDeleteValidateBeforeCall(ospId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for oSPOspIdGet */
    private com.squareup.okhttp.Call oSPOspIdGetCall(String ospId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/OSP/{osp-id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "osp-id" + "\\}", apiClient.escapeString(ospId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPOspIdGetValidateBeforeCall(String ospId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospId' is set
        if (ospId == null) {
            throw new ApiException("Missing the required parameter 'ospId' when calling oSPOspIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPOspIdGetCall(ospId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a given OSP behaviour policy.
     * Get a specific OSP document via the id. This will return the full OSP document in json format. 
     * @param ospId The identifier number of an OSP (required)
     * @return OSPPrivacyPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSPPrivacyPolicy oSPOspIdGet(String ospId) throws ApiException {
        ApiResponse<OSPPrivacyPolicy> resp = oSPOspIdGetWithHttpInfo(ospId);
        return resp.getData();
    }

    /**
     * Read a given OSP behaviour policy.
     * Get a specific OSP document via the id. This will return the full OSP document in json format. 
     * @param ospId The identifier number of an OSP (required)
     * @return ApiResponse&lt;OSPPrivacyPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSPPrivacyPolicy> oSPOspIdGetWithHttpInfo(String ospId) throws ApiException {
        com.squareup.okhttp.Call call = oSPOspIdGetValidateBeforeCall(ospId, null, null);
        Type localVarReturnType = new TypeToken<OSPPrivacyPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a given OSP behaviour policy. (asynchronously)
     * Get a specific OSP document via the id. This will return the full OSP document in json format. 
     * @param ospId The identifier number of an OSP (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPOspIdGetAsync(String ospId, final ApiCallback<OSPPrivacyPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPOspIdGetValidateBeforeCall(ospId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSPPrivacyPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for oSPOspIdPrivacyPolicyAccessReasonsGet */
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsGetCall(String ospId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/OSP/{osp-id}/privacy-policy/access-reasons".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "osp-id" + "\\}", apiClient.escapeString(ospId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsGetValidateBeforeCall(String ospId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospId' is set
        if (ospId == null) {
            throw new ApiException("Missing the required parameter 'ospId' when calling oSPOspIdPrivacyPolicyAccessReasonsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsGetCall(ospId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of access reason policy statements.
     * List of policy statements.  
     * @param ospId The identifier number of an OSP (required)
     * @return List&lt;OSPReasonPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OSPReasonPolicy> oSPOspIdPrivacyPolicyAccessReasonsGet(String ospId) throws ApiException {
        ApiResponse<List<OSPReasonPolicy>> resp = oSPOspIdPrivacyPolicyAccessReasonsGetWithHttpInfo(ospId);
        return resp.getData();
    }

    /**
     * Get the list of access reason policy statements.
     * List of policy statements.  
     * @param ospId The identifier number of an OSP (required)
     * @return ApiResponse&lt;List&lt;OSPReasonPolicy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OSPReasonPolicy>> oSPOspIdPrivacyPolicyAccessReasonsGetWithHttpInfo(String ospId) throws ApiException {
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsGetValidateBeforeCall(ospId, null, null);
        Type localVarReturnType = new TypeToken<List<OSPReasonPolicy>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of access reason policy statements. (asynchronously)
     * List of policy statements.  
     * @param ospId The identifier number of an OSP (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsGetAsync(String ospId, final ApiCallback<List<OSPReasonPolicy>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsGetValidateBeforeCall(ospId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OSPReasonPolicy>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for oSPOspIdPrivacyPolicyAccessReasonsPost */
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsPostCall(String ospId, AccessReason ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ospPolicy;
        
        // create path and map variables
        String localVarPath = "/OSP/{osp-id}/privacy-policy/access-reasons".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "osp-id" + "\\}", apiClient.escapeString(ospId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsPostValidateBeforeCall(String ospId, AccessReason ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospId' is set
        if (ospId == null) {
            throw new ApiException("Missing the required parameter 'ospId' when calling oSPOspIdPrivacyPolicyAccessReasonsPost(Async)");
        }
        
        // verify the required parameter 'ospPolicy' is set
        if (ospPolicy == null) {
            throw new ApiException("Missing the required parameter 'ospPolicy' when calling oSPOspIdPrivacyPolicyAccessReasonsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsPostCall(ospId, ospPolicy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new access reason statement in the privacy policy.
     * Called by the UI when OSP updating the policy statements 
     * @param ospId The identifier number of an OSP (required)
     * @param ospPolicy The first instance of this new statement. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void oSPOspIdPrivacyPolicyAccessReasonsPost(String ospId, AccessReason ospPolicy) throws ApiException {
        oSPOspIdPrivacyPolicyAccessReasonsPostWithHttpInfo(ospId, ospPolicy);
    }

    /**
     * Create a new access reason statement in the privacy policy.
     * Called by the UI when OSP updating the policy statements 
     * @param ospId The identifier number of an OSP (required)
     * @param ospPolicy The first instance of this new statement. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> oSPOspIdPrivacyPolicyAccessReasonsPostWithHttpInfo(String ospId, AccessReason ospPolicy) throws ApiException {
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsPostValidateBeforeCall(ospId, ospPolicy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new access reason statement in the privacy policy. (asynchronously)
     * Called by the UI when OSP updating the policy statements 
     * @param ospId The identifier number of an OSP (required)
     * @param ospPolicy The first instance of this new statement. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsPostAsync(String ospId, AccessReason ospPolicy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsPostValidateBeforeCall(ospId, ospPolicy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for oSPOspIdPrivacyPolicyAccessReasonsReasonIdDelete */
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsReasonIdDeleteCall(String ospId, String reasonId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/OSP/{osp-id}/privacy-policy/access-reasons/{reason-id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "osp-id" + "\\}", apiClient.escapeString(ospId.toString()))
        .replaceAll("\\{" + "reason-id" + "\\}", apiClient.escapeString(reasonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsReasonIdDeleteValidateBeforeCall(String ospId, String reasonId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospId' is set
        if (ospId == null) {
            throw new ApiException("Missing the required parameter 'ospId' when calling oSPOspIdPrivacyPolicyAccessReasonsReasonIdDelete(Async)");
        }
        
        // verify the required parameter 'reasonId' is set
        if (reasonId == null) {
            throw new ApiException("Missing the required parameter 'reasonId' when calling oSPOspIdPrivacyPolicyAccessReasonsReasonIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsReasonIdDeleteCall(ospId, reasonId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove the AccessReason entry in the list.
     * Remove an identified value. 
     * @param ospId The identifier number of an OSP (required)
     * @param reasonId The identifier of a statement in a policy, is only unique to the policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void oSPOspIdPrivacyPolicyAccessReasonsReasonIdDelete(String ospId, String reasonId) throws ApiException {
        oSPOspIdPrivacyPolicyAccessReasonsReasonIdDeleteWithHttpInfo(ospId, reasonId);
    }

    /**
     * Remove the AccessReason entry in the list.
     * Remove an identified value. 
     * @param ospId The identifier number of an OSP (required)
     * @param reasonId The identifier of a statement in a policy, is only unique to the policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> oSPOspIdPrivacyPolicyAccessReasonsReasonIdDeleteWithHttpInfo(String ospId, String reasonId) throws ApiException {
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsReasonIdDeleteValidateBeforeCall(ospId, reasonId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove the AccessReason entry in the list. (asynchronously)
     * Remove an identified value. 
     * @param ospId The identifier number of an OSP (required)
     * @param reasonId The identifier of a statement in a policy, is only unique to the policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsReasonIdDeleteAsync(String ospId, String reasonId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsReasonIdDeleteValidateBeforeCall(ospId, reasonId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for oSPOspIdPrivacyPolicyAccessReasonsReasonIdPut */
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsReasonIdPutCall(String ospId, String reasonId, AccessReason ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ospPolicy;
        
        // create path and map variables
        String localVarPath = "/OSP/{osp-id}/privacy-policy/access-reasons/{reason-id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "osp-id" + "\\}", apiClient.escapeString(ospId.toString()))
        .replaceAll("\\{" + "reason-id" + "\\}", apiClient.escapeString(reasonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsReasonIdPutValidateBeforeCall(String ospId, String reasonId, AccessReason ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospId' is set
        if (ospId == null) {
            throw new ApiException("Missing the required parameter 'ospId' when calling oSPOspIdPrivacyPolicyAccessReasonsReasonIdPut(Async)");
        }
        
        // verify the required parameter 'reasonId' is set
        if (reasonId == null) {
            throw new ApiException("Missing the required parameter 'reasonId' when calling oSPOspIdPrivacyPolicyAccessReasonsReasonIdPut(Async)");
        }
        
        // verify the required parameter 'ospPolicy' is set
        if (ospPolicy == null) {
            throw new ApiException("Missing the required parameter 'ospPolicy' when calling oSPOspIdPrivacyPolicyAccessReasonsReasonIdPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsReasonIdPutCall(ospId, reasonId, ospPolicy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an access reason statement in the privacy policy.
     * Called by the UI when OSP updating the policy statements 
     * @param ospId The identifier number of an OSP (required)
     * @param reasonId The identifier of a statement in a policy, is only unique to the policy. (required)
     * @param ospPolicy The updated instance of this OSP policy statement. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void oSPOspIdPrivacyPolicyAccessReasonsReasonIdPut(String ospId, String reasonId, AccessReason ospPolicy) throws ApiException {
        oSPOspIdPrivacyPolicyAccessReasonsReasonIdPutWithHttpInfo(ospId, reasonId, ospPolicy);
    }

    /**
     * Update an access reason statement in the privacy policy.
     * Called by the UI when OSP updating the policy statements 
     * @param ospId The identifier number of an OSP (required)
     * @param reasonId The identifier of a statement in a policy, is only unique to the policy. (required)
     * @param ospPolicy The updated instance of this OSP policy statement. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> oSPOspIdPrivacyPolicyAccessReasonsReasonIdPutWithHttpInfo(String ospId, String reasonId, AccessReason ospPolicy) throws ApiException {
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsReasonIdPutValidateBeforeCall(ospId, reasonId, ospPolicy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an access reason statement in the privacy policy. (asynchronously)
     * Called by the UI when OSP updating the policy statements 
     * @param ospId The identifier number of an OSP (required)
     * @param reasonId The identifier of a statement in a policy, is only unique to the policy. (required)
     * @param ospPolicy The updated instance of this OSP policy statement. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPOspIdPrivacyPolicyAccessReasonsReasonIdPutAsync(String ospId, String reasonId, AccessReason ospPolicy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyAccessReasonsReasonIdPutValidateBeforeCall(ospId, reasonId, ospPolicy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for oSPOspIdPrivacyPolicyGet */
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyGetCall(String ospId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/OSP/{osp-id}/privacy-policy/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "osp-id" + "\\}", apiClient.escapeString(ospId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyGetValidateBeforeCall(String ospId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospId' is set
        if (ospId == null) {
            throw new ApiException("Missing the required parameter 'ospId' when calling oSPOspIdPrivacyPolicyGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyGetCall(ospId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the current set of privacy policy statements about the usage of data for stated reasons.
     * This is a machine readable version of a G2C privacy policy statement entered using the OSP Admin dashboard; and retrieved by both the OSP &amp; PSP analyst dashboard for display purposes and also by the OSE component for checking regulation compliance.  
     * @param ospId The identifier number of an OSP (required)
     * @return OSPReasonPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSPReasonPolicy oSPOspIdPrivacyPolicyGet(String ospId) throws ApiException {
        ApiResponse<OSPReasonPolicy> resp = oSPOspIdPrivacyPolicyGetWithHttpInfo(ospId);
        return resp.getData();
    }

    /**
     * Get the current set of privacy policy statements about the usage of data for stated reasons.
     * This is a machine readable version of a G2C privacy policy statement entered using the OSP Admin dashboard; and retrieved by both the OSP &amp; PSP analyst dashboard for display purposes and also by the OSE component for checking regulation compliance.  
     * @param ospId The identifier number of an OSP (required)
     * @return ApiResponse&lt;OSPReasonPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSPReasonPolicy> oSPOspIdPrivacyPolicyGetWithHttpInfo(String ospId) throws ApiException {
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyGetValidateBeforeCall(ospId, null, null);
        Type localVarReturnType = new TypeToken<OSPReasonPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the current set of privacy policy statements about the usage of data for stated reasons. (asynchronously)
     * This is a machine readable version of a G2C privacy policy statement entered using the OSP Admin dashboard; and retrieved by both the OSP &amp; PSP analyst dashboard for display purposes and also by the OSE component for checking regulation compliance.  
     * @param ospId The identifier number of an OSP (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPOspIdPrivacyPolicyGetAsync(String ospId, final ApiCallback<OSPReasonPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyGetValidateBeforeCall(ospId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSPReasonPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for oSPOspIdPrivacyPolicyPut */
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyPutCall(String ospId, OSPReasonPolicyInput ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ospPolicy;
        
        // create path and map variables
        String localVarPath = "/OSP/{osp-id}/privacy-policy/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "osp-id" + "\\}", apiClient.escapeString(ospId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPOspIdPrivacyPolicyPutValidateBeforeCall(String ospId, OSPReasonPolicyInput ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospId' is set
        if (ospId == null) {
            throw new ApiException("Missing the required parameter 'ospId' when calling oSPOspIdPrivacyPolicyPut(Async)");
        }
        
        // verify the required parameter 'ospPolicy' is set
        if (ospPolicy == null) {
            throw new ApiException("Missing the required parameter 'ospPolicy' when calling oSPOspIdPrivacyPolicyPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyPutCall(ospId, ospPolicy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update OSP text policy entry in the database.
     * Called when by the watchdog detects a change in the textual policy and wants to update the current policy. 
     * @param ospId The identifier number of an OSP (required)
     * @param ospPolicy The changed instance of this OSPRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void oSPOspIdPrivacyPolicyPut(String ospId, OSPReasonPolicyInput ospPolicy) throws ApiException {
        oSPOspIdPrivacyPolicyPutWithHttpInfo(ospId, ospPolicy);
    }

    /**
     * Update OSP text policy entry in the database.
     * Called when by the watchdog detects a change in the textual policy and wants to update the current policy. 
     * @param ospId The identifier number of an OSP (required)
     * @param ospPolicy The changed instance of this OSPRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> oSPOspIdPrivacyPolicyPutWithHttpInfo(String ospId, OSPReasonPolicyInput ospPolicy) throws ApiException {
        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyPutValidateBeforeCall(ospId, ospPolicy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update OSP text policy entry in the database. (asynchronously)
     * Called when by the watchdog detects a change in the textual policy and wants to update the current policy. 
     * @param ospId The identifier number of an OSP (required)
     * @param ospPolicy The changed instance of this OSPRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPOspIdPrivacyPolicyPutAsync(String ospId, OSPReasonPolicyInput ospPolicy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPOspIdPrivacyPolicyPutValidateBeforeCall(ospId, ospPolicy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for oSPOspIdPut */
    private com.squareup.okhttp.Call oSPOspIdPutCall(String ospId, OSPPrivacyPolicyInput ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ospPolicy;
        
        // create path and map variables
        String localVarPath = "/OSP/{osp-id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "osp-id" + "\\}", apiClient.escapeString(ospId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPOspIdPutValidateBeforeCall(String ospId, OSPPrivacyPolicyInput ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospId' is set
        if (ospId == null) {
            throw new ApiException("Missing the required parameter 'ospId' when calling oSPOspIdPut(Async)");
        }
        
        // verify the required parameter 'ospPolicy' is set
        if (ospPolicy == null) {
            throw new ApiException("Missing the required parameter 'ospPolicy' when calling oSPOspIdPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPOspIdPutCall(ospId, ospPolicy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update OSPBehaviour entry in the database.
     * Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
     * @param ospId The identifier number of an OSP (required)
     * @param ospPolicy The changed instance of this OSPRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void oSPOspIdPut(String ospId, OSPPrivacyPolicyInput ospPolicy) throws ApiException {
        oSPOspIdPutWithHttpInfo(ospId, ospPolicy);
    }

    /**
     * Update OSPBehaviour entry in the database.
     * Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
     * @param ospId The identifier number of an OSP (required)
     * @param ospPolicy The changed instance of this OSPRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> oSPOspIdPutWithHttpInfo(String ospId, OSPPrivacyPolicyInput ospPolicy) throws ApiException {
        com.squareup.okhttp.Call call = oSPOspIdPutValidateBeforeCall(ospId, ospPolicy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update OSPBehaviour entry in the database. (asynchronously)
     * Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
     * @param ospId The identifier number of an OSP (required)
     * @param ospPolicy The changed instance of this OSPRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPOspIdPutAsync(String ospId, OSPPrivacyPolicyInput ospPolicy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPOspIdPutValidateBeforeCall(ospId, ospPolicy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for oSPPost */
    private com.squareup.okhttp.Call oSPPostCall(OSPPrivacyPolicyInput ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ospPolicy;
        
        // create path and map variables
        String localVarPath = "/OSP/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oSPPostValidateBeforeCall(OSPPrivacyPolicyInput ospPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ospPolicy' is set
        if (ospPolicy == null) {
            throw new ApiException("Missing the required parameter 'ospPolicy' when calling oSPPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oSPPostCall(ospPolicy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new OSP entry in the database.
     * Called by the policy computation component when a new regulation is added to OPERANDO. 
     * @param ospPolicy The first instance of this OSP document (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String oSPPost(OSPPrivacyPolicyInput ospPolicy) throws ApiException {
        ApiResponse<String> resp = oSPPostWithHttpInfo(ospPolicy);
        return resp.getData();
    }

    /**
     * Create a new OSP entry in the database.
     * Called by the policy computation component when a new regulation is added to OPERANDO. 
     * @param ospPolicy The first instance of this OSP document (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> oSPPostWithHttpInfo(OSPPrivacyPolicyInput ospPolicy) throws ApiException {
        com.squareup.okhttp.Call call = oSPPostValidateBeforeCall(ospPolicy, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new OSP entry in the database. (asynchronously)
     * Called by the policy computation component when a new regulation is added to OPERANDO. 
     * @param ospPolicy The first instance of this OSP document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oSPPostAsync(OSPPrivacyPolicyInput ospPolicy, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oSPPostValidateBeforeCall(ospPolicy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
