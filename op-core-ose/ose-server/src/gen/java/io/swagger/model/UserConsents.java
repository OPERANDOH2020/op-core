/*
 * OSP Enforcement (OSE)
 *  The OSP enforcement component provides a set of functions that manage the interaction of OSP behaviour with the user's private data. The OSE component is largely in charge of ensuring that an OSP follows both privacy regulations and policies put in place by the user (i.e. in the OPERANDO UPPs). There are a set of events that trigger the usage of this API.  1) When a new G2C OSP registers with OPERANDO via the OPERANDO console. The management console informs the OSE, which then checks that an OSP conforms with existing privacy regulations; if it breaches the regulations, the OSE returns via the management console a report describing the breaches.  2) When a change of OSP privacy policy or of the OSP's privacy settings are detected by the watchdog component. The watchdog component sends a message to a privacy analyst who reviews any changes. The privacy analyst may then inform the OSE of the new OSP information (to be checked for compliance with regulations and users' UPPs.  3) When a privacy legislation is entered (or changed) via the Regulator API. The OSE checks registered OSPs for compliance with the new regulations; where there is a breach the OSP is notified either by e-mail or the console. 
 *
 * OpenAPI spec version: 0.0.8
 * Contact: support@operando.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.AccessPolicy;
import java.util.ArrayList;
import java.util.List;

/**
 * UserConsents
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2016-12-12T13:34:24.407Z")
public class UserConsents   {
  @JsonProperty("userid")
  private String userid = null;

  @JsonProperty("consents")
  private List<AccessPolicy> consents = new ArrayList<AccessPolicy>();

  public UserConsents userid(String userid) {
    this.userid = userid;
    return this;
  }

   /**
   * The unique ID of the OSP user is subscribed to and these consent policies concern.  
   * @return userid
  **/
  @ApiModelProperty(value = "The unique ID of the OSP user is subscribed to and these consent policies concern.  ")
  public String getUserid() {
    return userid;
  }

  public void setUserid(String userid) {
    this.userid = userid;
  }

  public UserConsents consents(List<AccessPolicy> consents) {
    this.consents = consents;
    return this;
  }

  public UserConsents addConsentsItem(AccessPolicy consentsItem) {
    this.consents.add(consentsItem);
    return this;
  }

   /**
   * Access policies.
   * @return consents
  **/
  @ApiModelProperty(value = "Access policies.")
  public List<AccessPolicy> getConsents() {
    return consents;
  }

  public void setConsents(List<AccessPolicy> consents) {
    this.consents = consents;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserConsents userConsents = (UserConsents) o;
    return Objects.equals(this.userid, userConsents.userid) &&
        Objects.equals(this.consents, userConsents.consents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userid, consents);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserConsents {\n");
    
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    consents: ").append(toIndentedString(consents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

