<!-- * Copyright (c) 2016 {TECNALIA}. * All rights reserved. This program 
	and the accompanying materials * are made available under the terms of the 
	The MIT License (MIT). * which accompanies this distribution, and is available 
	at * http://opensource.org/licenses/MIT * * Contributors: * Gorka Mikel EchevarrÃ­a 
	{TECNALIA} * Gorka Benguria Elguezabal {TECNALIA} * Initially developed in 
	the context of OPERANDO EU project www.operando.eu -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>eu.operando</groupId>
	<artifactId>eu.operando.core.ldb.server</artifactId>
	<packaging>war</packaging>
	<name>eu.operando.core.ldb.server</name>
	<version>1.0.0</version>
	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<plugins>
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<url>http://localhost:8080/manager/text</url>
					<server>TomcatServer</server>
					<!-- /operando/core/logdb is the context and it is neccesary to deploy 
						to tomcat several modules generated automatically from swagger -->
					<path>/${server.basepath}</path>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<!-- added to support right name of log db for tomcat servers -->
					<warName>${server.warName}</warName>
					<!-- end of addition -->
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty-version}</version>
				<configuration>
					<webApp>
						<contextPath>/</contextPath>
					</webApp>
					<webAppSourceDirectory>target/${project.artifactId}-${project.version}</webAppSourceDirectory>
					<stopPort>8079</stopPort>
					<stopKey>stopit</stopKey>
					<httpConnector>
						<port>${server.externalport}</port>
						<idleTimeout>60000</idleTimeout>
					</httpConnector>
				</configuration>
				<executions>
					<execution>
						<id>start-jetty</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
						<configuration>
							<scanIntervalSeconds>0</scanIntervalSeconds>
							<daemon>true</daemon>
						</configuration>
					</execution>
					<execution>
						<id>stop-jetty</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.9.1</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/gen/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
			</plugin>
			<!-- added to support docker image creation -->
			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.13.9</version> <!-- last version in https://mvnrepository.com/artifact/org.jolokia/docker-maven-plugin -->
				<configuration>
					<images>
						<image>
							<alias>${project.artifactId}</alias>
							<name>${docker.repository.name}:${project.version}</name>
							<build>
								<from>tomcat:7</from> <!-- in our case we start from tomcat image -->
								<assembly>
									<basedir>/</basedir>
									<descriptor>docker-assembly.xml</descriptor>
								</assembly>
								<ports>
									<port>${server.internalport}</port>
								</ports>
							</build>
							<run>
								<namingStrategy>alias</namingStrategy>
								<ports>
									<port>${docker.logdb.port}:${server.internalport}</port>
								</ports>
							</run>
						</image>
					</images>
				</configuration>
			</plugin>
			<!-- end of addition -->
			<!-- added to support initial database creation -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sql-maven-plugin</artifactId>
				<version>1.5</version>
				<dependencies>
					<!-- specify the dependent JDBC driver here -->
					<dependency>
						<groupId>mysql</groupId>
						<artifactId>mysql-connector-java</artifactId>
						<version>5.0.8</version>
					</dependency>
				</dependencies>
				<!-- common configuration shared by all executions -->
				<configuration>
					<driver>com.mysql.jdbc.Driver</driver>
					<url>jdbc:mysql://${mysql.host}:${mysql.port}/${mysql.dbname}</url>
					<username>root</username>
					<password>root</password>
				</configuration>
				<executions>
					<execution>
						<id>default-cli</id>
						<phase>initalize</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<!-- specific configuration for this execution -->
						<configuration>
							<!-- specify your SQL commands, can be all of the following configurations -->
							<srcFiles>
								<srcFile>src/main/sql/creation.sql</srcFile>
							</srcFiles>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- end of addition -->
			<!-- added by GBE to support the generation of swagger API out from the 
				swagger generated code -->
			<plugin>
				<groupId>com.github.kongchen</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<version>3.1.4</version>
				<configuration>
					<apiSources>
						<apiSource>
							<springmvc>false</springmvc>
							<locations>eu.operando.core.ldb.server</locations>
							<schemes>http</schemes>
							<host>${server.externalhost}:${server.externalport}</host>
							<!--<host>publisher.dmz.lab.esilab.org</host> -->
							<basePath>/${server.basepath}</basePath>
							<info>
								<title>Operando LogDB server component</title>
								<version>1.0.0</version>
								<description>
									The Operando LogDB server centralises the logging
									activities of the Operando platform.
								</description>
								<termsOfService>
									{$operando.terms}
								</termsOfService>
								<contact>
									<email>esilab@tecnalia.org</email>
									<name>esilab</name>
									<url>http://esilab.org</url>
								</contact>
								<license>
									<name>MIT License</name>
									<url>http://www.opensource.org/licenses/mit-license.php</url>
								</license>
							</info>
							<securityDefinitions>
								<securityDefinition>
									<json>/securityDefinition.json</json>
								</securityDefinition>
							</securityDefinitions>
							<!-- Support classpath or file absolute path here. 1) classpath e.g: 
								"classpath:/markdown.hbs", "classpath:/templates/hello.html" 2) file e.g: 
								"${basedir}/src/main/resources/markdown.hbs", "${basedir}/src/main/resources/template/hello.html" -->
							<outputPath>${basedir}/generated/document.html</outputPath>
							<swaggerDirectory>generated/swagger-ui</swaggerDirectory>
						</apiSource>
					</apiSources>
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Step 1. - Download the swagger ui -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>wagon-maven-plugin</artifactId>
				<version>1.0</version>
				<executions>
					<execution>
						<id>download.swagger.ui</id>
						<phase>process-resources</phase>
						<configuration>
							<url>${swagger.url}</url>
							<fromFile>v${swagger-ui.version}.tar.gz</fromFile>
							<toFile>${project.build.directory}/swagger-ui-${swagger-ui.version}.tar.gz</toFile>
						</configuration>
						<goals>
							<goal>download-single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Step 2. - Decompress content and move it to target/swagger-ui folderv -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>decompressSwaggerui</id>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<echo message="Decompress archive" />
								<gunzip
									src="${project.build.directory}/swagger-ui-${swagger-ui.version}.tar.gz" />
								<untar
									src="${project.build.directory}/swagger-ui-${swagger-ui.version}.tar"
									dest="${project.build.directory}" />
								<echo message="moving resources" />
								<move todir="${destDir}" overwrite="yes">
									<fileset
										dir="${project.build.directory}/swagger-ui-${swagger-ui.version}/dist" />
								</move>
							</target>
						</configuration>
					</execution>
					<execution>
						<id>moveSwaggerJson</id>
						<phase>compile</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<copy todir="${destDir}">
									<fileset dir="${basedir}/generated/swagger-ui">
										<include name="swagger.json" />
									</fileset>
								</copy>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- Step 2.2 copy swagger-ui and swagger.json file to the objective -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<webResources>
						<resource>
							<directory>target/swagger-ui/</directory>
							<includes>
								<include>**/*.*</include>
							</includes>
						</resource>
						<resource>
							<directory>src/main/java</directory>
							<targetPath>WEB-INF/classes</targetPath>
						</resource>
						<resource>
							<directory>src/gen/java</directory>
							<targetPath>WEB-INF/classes</targetPath>
						</resource>
					</webResources>
				</configuration>
			</plugin>

			<!-- Step 2.1 and 2.3 replace url of the swagger file -->
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>maven-replacer-plugin</artifactId>
				<version>1.3.7</version>
				<executions>
					<execution>
						<id>swagger.location.replace</id>
						<phase>process-resources</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<includes>
								<include>${destDir}/index.html</include>
							</includes>
							<regex>false</regex>
							<token>http://petstore.swagger.io/v2/</token>
							<value></value>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- GBE end of addition -->

		</plugins>
		<resources>
			<!-- <resource> <directory>src/main/resources/config</directory> <filtering>true</filtering> 
				<includes> <include>**/*</include> </includes> </resource> -->
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*</include>
				</includes>
			</resource>
		</resources>
	</build>
	<dependencies>
		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-jersey2-jaxrs</artifactId>
			<scope>compile</scope>
			<version>${swagger-core-version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback-version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${servlet-api-version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet-core</artifactId>
			<version>${jersey2-version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-multipart</artifactId>
			<version>${jersey2-version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-joda</artifactId>
			<version>${jackson-version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>${jackson-version}</version>
		</dependency>
		<!-- Base64 encoding that works in both JVM and Android -->
		<dependency>
			<groupId>com.brsanthu</groupId>
			<artifactId>migbase64</artifactId>
			<version>2.2</version>
		</dependency>

		<!-- Bean Validation API support -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.1.0.Final</version>
<!-- 			<scope>provided</scope> -->
		</dependency>

		<!-- Mysql api -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.0.8</version>
		</dependency>
				
		<!-- Operando dependencies -->

		<dependency>
			<groupId>eu.operando</groupId>
			<artifactId>eu.operando.interfaces.aapi.client</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j-version}</version>
		</dependency>
				
<!--
		<dependency>
			<groupId>eu.operando</groupId>
			<artifactId>eu.operando.core.ldb.client</artifactId>
			<version>1.0.0</version>
		</dependency>
 		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-jersey-jaxrs</artifactId>
			<version>${swagger-core-version}</version>
		</dependency>

		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-core</artifactId>
			<version>${jersey-version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-json</artifactId>
			<version>${jersey-version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-servlet</artifactId>
			<version>${jersey-version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey.contribs</groupId>
			<artifactId>jersey-multipart</artifactId>
			<version>${jersey-version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-server</artifactId>
			<version>${jersey-version}</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${servlet-api-version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-client</artifactId>
			<version>${jersey-version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.8.8</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>junit</artifactId>
					<groupId>junit</groupId>
				</exclusion>
				<exclusion>
					<artifactId>snakeyaml</artifactId>
					<groupId>org.yaml</groupId>
				</exclusion>
				<exclusion>
					<artifactId>bsh</artifactId>
					<groupId>org.beanshell</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.5</version>
		</dependency>


		HTTP client: jersey-client
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-client</artifactId>
			<version>${jersey-version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey.contribs</groupId>
			<artifactId>jersey-multipart</artifactId>
			<version>${jersey-version}</version>
		</dependency>
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.0.1</version>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.1</version>
		</dependency>
 -->
	</dependencies>
	<repositories>
		<repository>
			<id>sonatype-snapshots</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>
	<properties>
    	<java.version>1.7</java.version>
    	<maven.compiler.source>${java.version}</maven.compiler.source>
    	<maven.compiler.target>${java.version}</maven.compiler.target>
    	<swagger-core-version>1.5.12</swagger-core-version>
    	<jetty-version>9.2.9.v20150224</jetty-version>
    	<jersey2-version>2.22.2</jersey2-version>
    	<jackson-version>2.8.7</jackson-version>
    	<junit-version>4.12</junit-version>
    	<logback-version>1.1.7</logback-version>
    	<servlet-api-version>2.5</servlet-api-version>
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jersey-version>1.18.1</jersey-version>
		<slf4j-version>1.6.3</slf4j-version>
		<server.internalhost>localhost</server.internalhost>
		<server.externalhost>localhost</server.externalhost>
		<server.internalport>8080</server.internalport>
		<server.externalport>8090</server.externalport>
		<server.warName>operando#core#ldb</server.warName>
		<server.basepath>operando/core/ldb</server.basepath>
		<!-- added to support docker image creation -->
		<docker.registry.name>localhost:5000/</docker.registry.name><!-- leave 
			empty for docker hub; use e.g. "localhost:5000/" for a local docker registry -->
		<docker.repository.name>${docker.registry.name}tecnalia/${project.artifactId}</docker.repository.name>
		<docker.logdb.port>8090</docker.logdb.port>
		<mysql.host>localhost</mysql.host>
		<mysql.port>3306</mysql.port>
		<mysql.dbname>operando_logdb</mysql.dbname>
		<!-- end of addition -->
		<!-- GBE propeties for swagger ui addtion -->
		<category>Rest</category>
		<title>Swagger XML</title>
		<swagger-ui.version>2.2.6</swagger-ui.version>
		<swagger.url>https://github.com/swagger-api/swagger-ui/archive</swagger.url>
		<destDir>target/swagger-ui</destDir>
		<!-- GBE end of addition -->
	</properties>
	<profiles>
		<profile>
			<id>jenkins-dev</id>
			<activation>
				<property>
					<name>ci</name>
				</property>
			</activation>
			<properties>
				<mysql.host>mysql.integration.operando.dmz.lab.esilab.org</mysql.host>
			</properties>
		</profile>
	</profiles>
</project>