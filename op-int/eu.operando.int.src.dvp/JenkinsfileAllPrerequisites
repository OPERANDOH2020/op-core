#!groovy
node {	
    currentBuild.result = "SUCCESS"
 
 	//Params defaults
	Boolean currentVerbose=false
	Boolean currentContinueTasks=true
	Boolean currentStopContainer=false

	try {

		stage ('Params Processing'){
			//def verbose -> defaults to "false"
			//def scmCredentials -> defaults to undefined
			//def continueTasks -> defaults to "true"
			//def ForceBuild -> defaults to "false"
			//def stopContainer -> defaults to "true"
			//def forceClear -> defaults to "false"
			//def clearOnFail -> defaults to "false"
			//def forcePush -> defaults to "false"
			//WARNING JENKINS SEND BOOLEANS AS STRING
			try{
			    currentVerbose=(verbose=="true")
			} catch (err){
			    println ("verbosity not provided defaults to false")
			}
			if (currentVerbose) println ("verbose = " + currentVerbose)
			try{
			    currentContinueTasks=(continueTasks=="true")
			} catch (err){
			    println ("continueTasks not provided defaults to true")
			}
			if (currentVerbose) println ("continueTasks = " + currentContinueTasks)							
			try{
			    currentStopContainer=(stopContainer=="true")
			} catch (err){
			    println ("stopContainer not provided defaults to true")
			}
		}
 	   	stage('Independent') { 
	      	build job: 'eu.operando.int.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	   	}
	   	stage('Dependent lv1') { 
	      	build job: 'eu.operando.int.dependencies.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	   	}
	   	stage('Dependent lv2') { 
	      	build job: 'eu.operando.int.resources.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	   	}
	   	stage('Dependent lv3') { 
	      	build job: 'eu.operando.int.core.ae.arx.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]	      
	      	build job: 'eu.operando.int.core.pdb.common-model.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]	      
	      	build job: 'eu.operando.int.core.ldb.client.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	      	build job: 'eu.operando.int.core.pdb.cas.client.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	      	build job: 'eu.operando.int.interfaces.aapi.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	      	build job: 'eu.operando.int.pdr.rpm.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	      	build job: 'eu.operando.int.pdr.dan.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	      	build job: 'eu.operando.int.test.dependencies.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]	      
	      	build job: 'eu.operando.int.core.pdb.client.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	   	}
	   	stage('Dependent lv4') { 
	      	build job: 'eu.operando.int.interfaces.aapi.client.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]	   
	      	build job: 'eu.operando.int.common.jnk.tsk.pre', propagate: false, parameters: [booleanParam(name: 'continueTasks', value: false)]
	   	}
	   if (currentContinueTasks) {
	       stage('continue') {
	   	        build job: 'eu.operando.int.jnk.tsk.build.images', wait: false, parameters: [booleanParam(name: 'stopContainer', value: false)]
	   	   }
	   }
	   	   	   
	  } catch (err) {
        currentBuild.result = "FAILURE"
		  emailext (
		      subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
		      body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
		        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
		      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
		    )
        throw err
		}
}
