<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>eu.operando.int.core.ldb.server.src.dvp</artifactId>
	<packaging>war</packaging>
	<parent>
		<groupId>eu.operando.int</groupId>
		<artifactId>eu.operando.int.src.dvp</artifactId>
		<version>ALPHA</version>
	</parent>
	<build>
		<!-- First we define the source code directories for a java application 
			server generated with swagger we will have two folders src/main and src/gen 
			maven conventions stablish one source folder but others can be added using 
			build-helper-maven-plugin add-source -->
		<!-- this is not considered and I need to add using the build-helper-maven-plugin -->
		<!-- <sourceDirectory>${sources.path}/src/main/java</sourceDirectory> -->
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${build-helper-maven-plugin-version}</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${sources.path}/src/gen/java</source>
								<source>${sources.path}/src/main/java</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-resource</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${sources.path}/src/main/resources/config</directory>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>${sources.path}/src/main/resources</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- We check the value of some properties values -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<echo>Displaying values of properties</echo>
								<echo>[sources.path]=${sources.path}</echo>
								<echo>[project.build.sourceDirectory]=${project.build.sourceDirectory}</echo>
								<echo>[server.endpoint.path]=${server.endpoint.path}</echo>
								<echo>[server.warName]=${server.warName}</echo>
								<echo>[docker.image.name]=${docker.image.name}</echo>
								<echo>[docker.image.version]=${docker.image.version}</echo>
								<echo>[docker.port1.mapping]=${docker.port1.mapping}</echo>
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- as the sources are not at a standard place it is necessary to provide 
				the webxml location -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<webXml>${sources.path}/src/main/webapp/WEB-INF/web.xml</webXml>
					<warName>${server.warName}</warName>
				</configuration>
			</plugin>
			<!-- this is to fix the warning "Build path specifies execution environment 
				J2SE-1.5. There are no JREs installed in the workspace that are strictly 
				compatible with this environment. -->
			<!--   it maybe is adding problems problems
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin> -->
			<!-- added by GBE to support the generation of swagger API out from the 
				swagger generated code -->
			<plugin>
				<groupId>com.github.kongchen</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<version>3.1.4</version>
				<configuration>
					<apiSources>
						<apiSource>
							<springmvc>false</springmvc>
							<locations>eu.operando.core.ldb.server</locations>
							<schemes>http</schemes>
							<host>${server.externalhost}:${server.externalport}</host>
							<!--<host>publisher.dmz.lab.esilab.org</host> -->
							<basePath>/${server.basepath}</basePath>
							<info>
								<title>Operando LogDB server component</title>
								<version>1.0.0</version>
								<description>
									The Operando LogDB server centralises the logging
									activities of the Operando platform.
								</description>
								<termsOfService>
									{$operando.terms}
								</termsOfService>
								<contact>
									<email>esilab@tecnalia.org</email>
									<name>esilab</name>
									<url>http://esilab.org</url>
								</contact>
								<license>
									<name>MIT License</name>
									<url>http://www.opensource.org/licenses/mit-license.php</url>
								</license>
							</info>
							<securityDefinitions>
								<securityDefinition>
									<json>/securityDefinition.json</json>
								</securityDefinition>
							</securityDefinitions>
							<!-- Support classpath or file absolute path here. 1) classpath e.g: 
								"classpath:/markdown.hbs", "classpath:/templates/hello.html" 2) file e.g: 
								"${basedir}/src/main/resources/markdown.hbs", "${basedir}/src/main/resources/template/hello.html" -->
							<outputPath>${basedir}/generated/document.html</outputPath>
							<swaggerDirectory>generated/swagger-ui</swaggerDirectory>
						</apiSource>
					</apiSources>
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Step 1. - Download the swagger ui -->
			<!-- Plugin to copy the war into generated folder accessible to the docker 
				file -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<id>copy-resource-one</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>src/main/docker/generated</outputDirectory>
							<resources>
								<resource>
									<directory>target</directory>
									<includes>
										<include>*.war</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- added to support docker image creation -->
			<!-- Step 1. - Download the swagger ui -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>wagon-maven-plugin</artifactId>
				<version>1.0</version>
				<executions>
					<execution>
						<id>download.swagger.ui</id>
						<phase>process-resources</phase>
						<configuration>
							<url>${swagger.url}</url>
							<fromFile>v${swagger-ui.version}.tar.gz</fromFile>
							<toFile>${project.build.directory}/swagger-ui-${swagger-ui.version}.tar.gz</toFile>
						</configuration>
						<goals>
							<goal>download-single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Step 2. - Decompress content and move it to target/swagger-ui folderv -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>decompressSwaggerui</id>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<echo message="Decompress archive" />
								<gunzip
									src="${project.build.directory}/swagger-ui-${swagger-ui.version}.tar.gz" />
								<untar
									src="${project.build.directory}/swagger-ui-${swagger-ui.version}.tar"
									dest="${project.build.directory}" />
								<echo message="moving resources" />
								<move todir="${destDir}" overwrite="yes">
									<fileset
										dir="${project.build.directory}/swagger-ui-${swagger-ui.version}/dist" />
								</move>
							</target>
						</configuration>
					</execution>
					<execution>
						<id>moveSwaggerJson</id>
						<phase>compile</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<copy todir="${destDir}">
									<fileset dir="${basedir}/generated/swagger-ui">
										<include name="swagger.json" />
									</fileset>
								</copy>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- Step 2.2 copy swagger-ui and swagger.json file to the objective -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<webResources>
						<resource>
							<directory>target/swagger-ui/</directory>
							<includes>
								<include>**/*.*</include>
							</includes>
						</resource>
						<resource>
							<directory>src/main/java</directory>
							<targetPath>WEB-INF/classes</targetPath>
						</resource>
						<resource>
							<directory>src/gen/java</directory>
							<targetPath>WEB-INF/classes</targetPath>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<!-- Step 2.1 and 2.3 replace url of the swagger file -->
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>maven-replacer-plugin</artifactId>
				<version>1.3.7</version>
				<executions>
					<execution>
						<id>swagger.location.replace</id>
						<phase>process-resources</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<includes>
								<include>${destDir}/index.html</include>
							</includes>
							<regex>false</regex>
							<token>http://petstore.swagger.io/v2/</token>
							<value></value>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- GBE end of addition -->
			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<!-- last version in https://mvnrepository.com/artifact/org.jolokia/docker-maven-plugin -->
				<version>0.13.9</version>
				<configuration>
					<images>
						<image>
							<alias>${docker.name}</alias>
							<name>${docker.image.name}:${docker.image.version}</name>
							<build>
								<assembly>
									<!-- this time we will do it from a docker file element is needed 
										to switch the usage of the extrenal file -->
									<dockerFileDir>.</dockerFileDir>
									<!-- end -->
								</assembly>
							</build>
							<run>
								<namingStrategy>alias</namingStrategy>
								<env>
									<MYSQL_DB_HOST>${mysql.db.host}</MYSQL_DB_HOST>
									<MYSQL_DB_NAME>${mysql.db.name}</MYSQL_DB_NAME>
									<MYSQL_DB_PASSWORD>${mysql.db.password}</MYSQL_DB_PASSWORD>
									<MYSQL_DB_USER>${mysql.db.user}</MYSQL_DB_USER>
								</env>
								<ports>
									<port>${docker.port1.mapping}</port>
								</ports>
							</run>
						</image>
					</images>
				</configuration>
			</plugin>
			<!-- end of addition -->
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>1.0</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											build-helper-maven-plugin
										</artifactId>
										<versionRange>1.0</versionRange>
										<goals>
											<goal>add-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<!-- this is not considered and I need to add using the build-helper-maven-plugin -->
		<!-- <resources> -->
		<!-- <resource> -->
		<!-- <directory>${sources.path}/src/main/resources/config</directory> -->
		<!-- <filtering>true</filtering> -->
		<!-- </resource> -->
		<!-- </resources> -->
	</build>
	<dependencies>
		<dependency>
			<groupId>eu.operando</groupId>
			<artifactId>eu.operando.core.ldb.server</artifactId>
			<version>1.0.0</version>
			<type>pom</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${servlet-api-version}</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>
	<properties>
		<servlet-api-version>2.5</servlet-api-version>
		<server.internalhost>localhost</server.internalhost>
		<server.externalhost>${operando.core.ldb.host}</server.externalhost>
		<server.internalport>8080</server.internalport>
		<server.externalport>8090</server.externalport>
		<server.basepath>operando/core/ldb</server.basepath>
		<server.endpoint.path>${operando.core.ldb.endpoint.path}</server.endpoint.path>
		<server.warName>${server.warName.generated}</server.warName>
		<docker.name>eu.operando.core.ldb.server</docker.name>
		<docker.image.name>${docker.registry.name}${docker.submitter}/${docker.name}</docker.image.name>
		<docker.image.version>${project.version}</docker.image.version>
		<docker.port1.external>${operando.core.ldb.port}</docker.port1.external>
		<docker.port1.mapping>${docker.port1.external}:8080</docker.port1.mapping>
		<mysql.db.host>${operando.mysql.host}</mysql.db.host>
		<mysql.db.port>${operando.mysql.port}</mysql.db.port>
		<mysql.db.name>operando_logdb</mysql.db.name>
		<mysql.db.user>${operando.mysql.root.user}</mysql.db.user>
		<mysql.db.password>${operando.mysql.root.password}</mysql.db.password>
		<!-- for config file custimization -->
		<mysql.port>${operando.mysql.port}</mysql.port>
		<mysql.host>${operando.mysql.host}</mysql.host>
		<mysql.dbname>${mysql.db.name}</mysql.dbname>
		
	</properties>
</project>