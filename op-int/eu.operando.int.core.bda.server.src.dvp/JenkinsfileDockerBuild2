#!groovy
//http://groovy-lang.org/semantics.html

node {	
    currentBuild.result = "SUCCESS"
	try	{	
		//Provided vars
		def devopsSourcesRelativePath = 'op-int/eu.operando.int.core.bda.server.src.dvp'
		def devopsSourcesRepo = 'https://github.com/OPERANDOH2020/op-core.git'
		def sourcesRelativePath="op-core-bigdataanalytics/eu.operando.core.bda.server"//previously sourcesServerPath
		def sourcesRepo=devopsSourcesRepo//previously sourcesServerRepo
		
		Boolean hasSources = (sourcesRelativePath!=null)&&(sourcesRepo!=null)
		
		//Computed vars
		def devopsSourcesPath
		def devopsSourcesGitRepoPath
		def devopsSourcesGitPath
		def sourcesPath
		def sourcesGitRepoPath
		def sourcesGitPath
		def workspace
		def jenkinsWorkspace

		Boolean currentVerbose=false
		Boolean hasCredentials=false
		Boolean currentContinueTasks=true
		Boolean currentForce=false
		Boolean currentStopContainer=true
		Boolean hasNewDevopsSources=false
		Boolean hasNewSources=false
		Boolean requiresBuild=false
		Boolean requiresPackage=false

		Boolean hasDevopsPomPackaging=false
		String devopsPomPackaging=""
		Boolean hasPomPackaging=false
		String pomPackaging=""
		Boolean hasPomFile=false
		String pomFile=""
				
		String devopsSourcesLastCommitFile
		String sourcesLastCommitFile

		String devopsSourcesLastCommit
		String devopsSourcesCurrentCommit
		String sourcesLastCommit
		String sourcesCurrentCommit
		
		String mvnHome;
		
		stage ('Params processing'){
			//def verbose -> defaults to "false"
			//def scmCredentials -> defaults to undefined
			//def continueTasks -> defaults to "true"
			//def force -> defaults to "false"
			//def stopContainer -> defaults to "true"
			//WARNING JENKINS SEND BOOLEANS AS STRING

			try{
			    currentVerbose=(verbose=="true")
			} catch (err){
			    println ("verbosity not provided defaults to false")
			}
			currentVerbose=true //forDebugging purposes
			if (currentVerbose) println ("verbose = " + currentVerbose)
			
			if (hasSources) {
				try{
				    if (scmCredentials==null){ error "scm credentials empty"}
				    hasCredentials=true;
				} catch (err){
				    println ("No scm credentials param")
				}			
				if (!hasCredentials){ error "No scm credentials to retrieve the source code" }				
				if (currentVerbose) println ("scmCredentials = " + scmCredentials)
			}

			try{
			    currentContinueTasks=(continueTasks=="true")
			} catch (err){
			    println ("continueTasks not provided defaults to true")
			}
			if (currentVerbose) println ("continueTasks = " + currentContinueTasks)		
					
			try{
			    currentForce=(force=="true")
			} catch (err){
			    println ("force not provided defaults to false")
			}
			if (currentVerbose) println ("currentForce = " + currentForce)			
				
			try{
			    currentStopContainer=(stopContainer=="true")
			} catch (err){
			    println ("stopContainer not provided defaults to true")
			}
			if (currentVerbose) println ("currentStopContainer = " + currentStopContainer)				
		}

		stage ('Calculate Variables'){
		    workspace=WORKSPACE
			if (currentVerbose) println ("workspace = " + workspace)				
		    
		    jenkinsWorkspace=WORKSPACE+"/../workspace\\@script"
			if (currentVerbose) println ("jenkinsWorkspace = " + jenkinsWorkspace)				

		    devopsSourcesPath=workspace
			if (currentVerbose) println ("devopsSourcesPath = " + devopsSourcesPath)
			
		    devopsSourcesGitRepoPath=jenkinsWorkspace
			if (currentVerbose) println ("devopsSourcesGitRepoPath = " + devopsSourcesGitRepoPath)

		    devopsSourcesGitPath=devopsSourcesGitRepoPath + "/" + devopsSourcesRelativePath
			if (currentVerbose) println ("devopsSourcesGitPath = " + devopsSourcesGitPath)

		    devopsSourcesLastCommitFile=devopsSourcesPath+"/src.dvp.last.commit"
			if (currentVerbose) println ("devopsSourcesLastCommitFile = " + devopsSourcesLastCommitFile)

			if (hasSources){
    		    sourcesPath=workspace+"/sources"
	    		if (currentVerbose) println ("sourcesPath = " + sourcesPath)
				
			    sourcesGitRepoPath=workspace+"/sourcesRepo"
				if (currentVerbose) println ("sourcesGitRepoPath = " + sourcesGitRepoPath)
	
			    sourcesGitPath=sourcesGitRepoPath + "/" + sourcesRelativePath
				if (currentVerbose) println ("sourcesGitPath = " + sourcesGitPath)

        		sourcesLastCommitFile=devopsSourcesPath+"/src.last.commit"
	    		if (currentVerbose) println ("sourcesLastCommitFile = " + sourcesLastCommitFile)
			}
		}
		
		if(hasSources){
		    stage ('Gather Sources'){
		        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: sourcesGitRepoPath], [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: sourcesRelativePath]]]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: scmCredentials, url: sourcesRepo]]])
    		    if (currentVerbose) println ("Sources checkout to " + sourcesPath)
		    }
		}
		
		if(currentForce){
	        requiresBuild=true
		}
		else{
    		stage ('Assess Built Need'){
    		    sh "touch ${devopsSourcesLastCommitFile}" 
    		    devopsSourcesLastCommit = sh(returnStdout: true, script: "cat ${devopsSourcesLastCommitFile}").trim()
    		    if (currentVerbose) println ("devopsSourcesLastCommit = " + devopsSourcesLastCommit)
		        try{
		            devopsSourcesCurrentCommit = sh(returnStdout: true, script: "git -C ${devopsSourcesGitRepoPath} rev-parse HEAD").trim()
    			} catch (err){
    			}
			    if (currentVerbose) println ("devopsSourcesCurrentCommit = " + devopsSourcesCurrentCommit)
    			if (devopsSourcesCurrentCommit!=''){
    				sh "echo \"${devopsSourcesCurrentCommit}\" > ${devopsSourcesLastCommitFile}"
    			}
    		    if (devopsSourcesCurrentCommit!=devopsSourcesLastCommit) {
 		  			hasNewDevopsSources=true
    		        requiresBuild=true
			    }
		        if (hasSources)
		        {
        		    sh "touch ${sourcesLastCommitFile}" 
        		    sourcesLastCommit = sh(returnStdout: true, script: "cat ${sourcesLastCommitFile}").trim()
        		    if (currentVerbose) println ("sourcesLastCommit = " + sourcesLastCommit)
    		        try{
    		            sourcesCurrentCommit = sh(returnStdout: true, script: "git -C ${sourcesGitRepoPath} rev-parse HEAD").trim()
        			} catch (err){
        			}
       			    if (currentVerbose) println ("sourcesCurrentCommit = " + sourcesCurrentCommit)
        			if (devopsSourcesCurrentCommit!=''){
        				sh "echo \"${sourcesCurrentCommit}\" > ${sourcesLastCommitFile}"
        			}
        		    if (sourcesCurrentCommit!=sourcesLastCommit) {
						hasNewSources=true
        		        requiresBuild=true
        		    }
		        }
    		}
		}
       	if (currentVerbose) println ("hasNewDevopsSources = " + hasNewDevopsSources)
       	if (currentVerbose) println ("hasNewSources = " + hasNewSources)
       	if (currentVerbose) println ("requiresBuild = " + requiresBuild)
		
        if(requiresBuild){
            stage ('prepare Buid Variables'){
                // Get the Maven tool.
                // ** NOTE: This 'M3' Maven tool must be configured
                // **       in the global configuration.
                mvnHome = tool 'Maven 3.3.9 colocated'
            }
             if(hasNewDevopsSources){
	            stage ('Devops Source Move'){
	                  sh "rm -rf ${devopsSourcesPath}/src"	   
	                  sh "mv ${devopsSourcesGitPath}/src ${devopsSourcesPath}"	   
	                  sh "rm -rf ${devopsSourcesPath}/pom.xml"	   
	                  sh "mv ${devopsSourcesGitPath}/pom.xml ${devopsSourcesPath}/pom.xml"
	            }
            }
            if(hasNewSources){
	            stage ('Source Move'){
                  sh "rm -rf ${sourcesPath}"	   
                  sh "mkdir ${sourcesPath}"	   
	              sh "mv ${sourcesGitPath}/* ${sourcesPath}"
	            }
            	stage ('Assess sources install need'){          	
                 	pomFile=sh(returnStdout: true, script: "ls ${sourcesPath}/pom.xml").trim()
	            	hasPomFile=(""!=pomFile)
 					if (currentVerbose) println ("hasPomFile = " + hasPomFile)
                }	            
                if (hasPomFile){
	                stage ('Source Maven Install'){
	                 	sh "grep '<packaging>.*pom.*</packaging>' ${sourcesPath}/pom.xml" //test
	                 	pomPackaging=sh(returnStdout: true, script: "grep '<packaging>.*pom.*</packaging>' ${sourcesPath}/pom.xml").trim()
	                 	hasPomPackaging=(""!=pomPackaging)
	 					if (currentVerbose) println ("hasPomPackaging = " + hasPomPackaging)
	 					if 	(hasPomPackaging){
	                    	sh "'${mvnHome}/bin/mvn' install:install --non-recursive -Dmaven.test.skip=true -f ${sourcesPath}/pom.xml"
	 					} else {
		                    sh "'${mvnHome}/bin/mvn' clean install --non-recursive -Dmaven.test.skip=true -f ${sourcesPath}/pom.xml"				
	 					}
	                }
                }
            }
            if(currentVerbose){
                stage ('Variables echo'){
                	sh "'${mvnHome}/bin/mvn' antrun:run@echobase -f ${devopsSourcesPath}/pom.xml"
                    sh "'${mvnHome}/bin/mvn' antrun:run@echo -f ${devopsSourcesPath}/pom.xml"
                }
            }
            stage ('Assess package/install need'){          	
  	            sh "echo begin test"
 	            try{sh "grep '<packaging>.*pom.*</packaging>' ${devopsSourcesPath}/pom.xml"}catch(err){} 
 	            try{sh "grep \"<packaging>.*pom.*</packaging>\" ${devopsSourcesPath}/pom.xml"}catch(err){}  
 	            try{sh "grep \'<packaging>.*pom.*</packaging>\' ${devopsSourcesPath}/pom.xml"}catch(err){}  
 	            try{sh "grep \\\'<packaging>.*pom.*</packaging>\\\' ${devopsSourcesPath}/pom.xml"}catch(err){}  
 	            try{sh "grep pom ${devopsSourcesPath}/pom.xml"}catch(err){}  
 	            try{sh "grep '<packaging>.*pom.*</packaging>' pom.xml"}catch(err){} 
 	            try{sh "grep \"<packaging>.*pom.*</packaging>\" pom.xml"}catch(err){}  
 	            try{sh "grep \'<packaging>.*pom.*</packaging>\' pom.xml"}catch(err){}  
 	            try{sh "grep \\\'<packaging>.*pom.*</packaging>\\\' pom.xml"}catch(err){}  
 	            try{sh "grep pom pom.xml"}catch(err){}  
	            try{sh "grep '<packaging>.*pom.*</packaging>' sources/pom.xml"}catch(err){} 
 	            try{sh "grep \"<packaging>.*pom.*</packaging>\" sources/pom.xml"}catch(err){}  
 	            try{sh "grep \'<packaging>.*pom.*</packaging>\' sources/pom.xml"}catch(err){}  
 	            try{sh "grep \\\'<packaging>.*pom.*</packaging>\\\' sources/pom.xml"}catch(err){}  
 	            try{sh "grep pom sources/pom.xml"}catch(err){}  
 	            sh "echo end test"
                devopsPomPackaging=sh(returnStdout: true, script: "grep '<packaging>.*pom.*</packaging>' ${devopsSourcesPath}/pom.xml").trim()
                hasDevopsPomPackaging=(""!=devopsPomPackaging)
 				if (currentVerbose) println ("hasDevopsPomPackaging = " + hasDevopsPomPackaging)				
            }           
            if (hasDevopsPomPackaging){
                stage ('Maven Devops Install'){
                    sh "'${mvnHome}/bin/mvn' install:install --non-recursive -Dmaven.test.skip=true -f ${dockerSourcesPath}/pom.xml"
                }
            } else {
                stage ('Maven Devops Package'){
                    sh "'${mvnHome}/bin/mvn' clean install --non-recursive -Dmaven.test.skip=true -f ${dockerSourcesPath}/pom.xml"
                }            
            }
            if (currentStopContainer){
	            stage ('Maven Docker stop'){
	                sh "'${mvnHome}/bin/mvn' docker:stop --non-recursive -Dmaven.test.skip=true -f ${dockerSourcesPath}/pom.xml"
	            }
            }
            stage ('Maven Build docker image'){
                sh "'${mvnHome}/bin/mvn' docker:build --non-recursive -Dmaven.test.skip=true -f ${dockerSourcesPath}/pom.xml"
            }	   	   	   
            stage ('Maven Build docker push'){
                sh "'${mvnHome}/bin/mvn' docker:push --non-recursive -Dmaven.test.skip=true -f ${dockerSourcesPath}/pom.xml"
            }
			if (continueTasks == 'true') {
				stage('continue') {
			    	//build job: 'eu.operando.int.jnk.tsk.build.images', wait: false
			    }
			}            
        }
	} catch (err) {
	    currentBuild.result = "FAILURE"
			emailext (
				subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
				body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
				<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
				recipientProviders: [[$class: 'DevelopersRecipientProvider']]
			)
	    throw err
	}
}
