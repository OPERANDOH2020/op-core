<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>eu.operando.int</groupId>
		<artifactId>eu.operando.int.src.dvp</artifactId>
		<version>ALPHA</version>
	</parent>
	<artifactId>eu.operando.int.core.ae.server.test.01.src.dvp</artifactId>
	<!-- First we define the source code directories for a java application 
		server generated with swagger we will have two folders src/main and src/gen 
		maven conventions stablish one source folder but others can be added using 
		build-helper-maven-plugin add-source -->
	<!-- this is not considered and I need to add using the build-helper-maven-plugin -->
	<!-- <sourceDirectory>${sources.path}/src/main/java</sourceDirectory> -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${build-helper-maven-plugin-version}</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${sources.path}/src</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-resource</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${sources.path}/src</directory>
									<includes>
										<include>test.properties</include>
										<include>db.properties</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- We check the value of some properties values -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<id>echo</id>
						<phase>initialize</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<echo>Displaying values of properties</echo>
								<echo>[sources.path]=${sources.path}</echo>
								<echo>[project.build.sourceDirectory]=${project.build.sourceDirectory}</echo>
								<echo>[docker.image.name]=${docker.image.name}</echo>
								<echo>[docker.image.version]=${docker.image.version}</echo>
								<echo>[operando.core.ae.basepath]=${operando.core.ae.basepath}</echo>
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- this is to fix the warning "Build path specifies execution environment 
				J2SE-1.5. There are no JREs installed in the workspace that are strictly 
				compatible with this environment. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<!-- Adds for executable jar support -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<archive>
								<manifest>
									<mainClass>
										eu.operando.core.ae.test.Test
									</mainClass>
								</manifest>
							</archive>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
						</configuration>
					</execution>
				</executions>
			</plugin>
		<!-- Plugin to copy the war into generated folder accessible to the docker 
			file -->
		<plugin>
			<artifactId>maven-resources-plugin</artifactId>
			<version>2.7</version>
			<executions>
				<execution>
					<id>copy-resource-one</id>
					<phase>package</phase>
					<goals>
						<goal>copy-resources</goal>
					</goals>
					<configuration>
						<outputDirectory>src/main/docker/generated</outputDirectory>
						<resources>
							<resource>
								<directory>target</directory>
								<includes>
									<include>*.jar</include>
								</includes>
							</resource>
						</resources>
					</configuration>
				</execution>
			</executions>
		</plugin>
		<!-- added to support docker image creation -->
		<plugin>
			<groupId>org.jolokia</groupId>
			<artifactId>docker-maven-plugin</artifactId>
			<!-- last version in https://mvnrepository.com/artifact/org.jolokia/docker-maven-plugin -->
			<version>0.13.9</version>
			<configuration>
				<images>
					<image>
						<alias>${docker.name}</alias>
						<name>${docker.image.name}:${docker.image.version}</name>
						<build>
							<assembly>
								<!-- this time we will do it from a docker file element is needed 
									to switch the usage of the extrenal file -->
								<dockerFileDir>.</dockerFileDir>
								<!-- end -->
							</assembly>
						</build>
						<run>
							<log>
								<enabled>true</enabled>
								<color>red</color>
							</log>
							<wait>
								<log>ALL SUCCESSFUL</log>
							</wait>
							<namingStrategy>alias</namingStrategy>
						</run>
					</image>
				</images>
			</configuration>
		</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>1.0</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											build-helper-maven-plugin
										</artifactId>
										<versionRange>1.0</versionRange>
										<goals>
											<goal>add-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<!-- this is not considered and I need to add using the build-helper-maven-plugin -->
		<!-- <resources> -->
		<!-- <resource> -->
		<!-- <directory>${sources.path}/src/main/resources/config</directory> -->
		<!-- <filtering>true</filtering> -->
		<!-- </resource> -->
		<!-- </resources> -->
	</build>
	<dependencies>
		<dependency>
			<groupId>eu.operando</groupId>
			<artifactId>eu.operando.core.ae.test</artifactId>
			<version>0.0.1-SNAPSHOT</version>
			<type>pom</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-version}</version>
		</dependency>
	</dependencies>
	<properties>
		<junit-version>4.8.1</junit-version>
		<server.endpoint.path>${operando.core.ae.endpoint.path}</server.endpoint.path>
		<docker.name>eu.operando.core.ae.server.test.01</docker.name>
		<docker.image.name>${docker.registry.name}${docker.submitter}/${docker.name}</docker.image.name>
		<docker.image.version>${project.version}</docker.image.version>
		<mysql.host>${operando.mysql.host}</mysql.host>
		<mysql.port>${operando.mysql.port}</mysql.port>
		<mysql.dbname>operando_personaldatadb</mysql.dbname>
		<mysql.user>${operando.mysql.root.user}</mysql.user>
		<mysql.password>${operando.mysql.root.password}</mysql.password>
	</properties>
</project>