/*
 * Privacy Questionairre API
 * A set of methods to manage privacy quesions.   Privacy questions are generated to form a questionairre that can be displayed to the user. The answers to these questions form a privacy sensitivity index.  For an individual service (OSP) a set of questions can be generated
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

/**
 * Questionobject
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-06-30T09:37:51.622Z")
public class Questionobject   {
  @JsonProperty("question")
  private String question = null;

  @JsonProperty("category")
  private String category = null;

  @JsonProperty("meta")
  private String meta = null;

  @JsonProperty("weight")
  private String weight = null;

  @JsonProperty("score")
  private String score = null;

  public Questionobject question(String question) {
    this.question = question;
    return this;
  }

   /**
   * The text to display to the user for this question.
   * @return question
  **/
  @JsonProperty("question")
  @ApiModelProperty(value = "The text to display to the user for this question.  ")
  public String getQuestion() {
    return question;
  }

  public void setQuestion(String question) {
    this.question = question;
  }

  public Questionobject category(String category) {
    this.category = category;
    return this;
  }

   /**
   * The type of data this question refers to - general, medical, OSP, etc.
   * @return category
  **/
  @JsonProperty("category")
  @ApiModelProperty(value = "The type of data this question refers to - general, medical, OSP, etc. ")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public Questionobject meta(String meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Additional helper (tooltip) information to display to the user.
   * @return meta
  **/
  @JsonProperty("meta")
  @ApiModelProperty(value = "Additional helper (tooltip) information to display to the user.  ")
  public String getMeta() {
    return meta;
  }

  public void setMeta(String meta) {
    this.meta = meta;
  }

  public Questionobject weight(String weight) {
    this.weight = weight;
    return this;
  }

   /**
   * The importance of this question to an overal ranking 0..1 with 1 the greatest importance.
   * @return weight
  **/
  @JsonProperty("weight")
  @ApiModelProperty(value = "The importance of this question to an overal ranking 0..1 with 1 the greatest importance.  ")
  public String getWeight() {
    return weight;
  }

  public void setWeight(String weight) {
    this.weight = weight;
  }

  public Questionobject score(String score) {
    this.score = score;
    return this;
  }

   /**
   * The score field to be entered by the user.
   * @return score
  **/
  @JsonProperty("score")
  @ApiModelProperty(value = "The score field to be entered by the user.  ")
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Questionobject questionobject = (Questionobject) o;
    return Objects.equals(this.question, questionobject.question) &&
        Objects.equals(this.category, questionobject.category) &&
        Objects.equals(this.meta, questionobject.meta) &&
        Objects.equals(this.weight, questionobject.weight) &&
        Objects.equals(this.score, questionobject.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(question, category, meta, weight, score);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{\n");

    sb.append("\"question\": \"").append(toIndentedString(question)).append("\"\n");
    sb.append("\"category: \"").append(toIndentedString(category)).append("\"\n");
    sb.append("\"meta: \"").append(toIndentedString(meta)).append("\"\n");
    sb.append("\"weight: \"").append(toIndentedString(weight)).append("\"\n");
    sb.append("\"score: \"").append(toIndentedString(score)).append("\"\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

